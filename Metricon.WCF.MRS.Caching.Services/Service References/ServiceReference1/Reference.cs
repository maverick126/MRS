//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Metricon.WCF.MRS.Caching.Services.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRetailSystem")]
    public interface IRetailSystem {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetContractDraftActionAvailability", ReplyAction="http://tempuri.org/IRetailSystem/GetContractDraftActionAvailabilityResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.ContractDraftActionAvailability GetContractDraftActionAvailability(int estimateRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetContractDraftActionAvailability", ReplyAction="http://tempuri.org/IRetailSystem/GetContractDraftActionAvailabilityResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ContractDraftActionAvailability> GetContractDraftActionAvailabilityAsync(int estimateRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetFinalContractActionAvailability", ReplyAction="http://tempuri.org/IRetailSystem/GetFinalContractActionAvailabilityResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.FinalContractActionAvailability GetFinalContractActionAvailability(int estimateRevisionId, string contractNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetFinalContractActionAvailability", ReplyAction="http://tempuri.org/IRetailSystem/GetFinalContractActionAvailabilityResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.FinalContractActionAvailability> GetFinalContractActionAvailabilityAsync(int estimateRevisionId, string contractNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetCustomerSupportActionAvailability", ReplyAction="http://tempuri.org/IRetailSystem/GetCustomerSupportActionAvailabilityResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.CustomerSupportActionAvailability GetCustomerSupportActionAvailability(int estimateRevisionId, string contractNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetCustomerSupportActionAvailability", ReplyAction="http://tempuri.org/IRetailSystem/GetCustomerSupportActionAvailabilityResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.CustomerSupportActionAvailability> GetCustomerSupportActionAvailabilityAsync(int estimateRevisionId, string contractNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetSalesEstimatorActionAvailability", ReplyAction="http://tempuri.org/IRetailSystem/GetSalesEstimatorActionAvailabilityResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.SalesEstimatorActionAvailability GetSalesEstimatorActionAvailability(int estimateRevisionId, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetSalesEstimatorActionAvailability", ReplyAction="http://tempuri.org/IRetailSystem/GetSalesEstimatorActionAvailabilityResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SalesEstimatorActionAvailability> GetSalesEstimatorActionAvailabilityAsync(int estimateRevisionId, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetContractDraftCreationVisibility", ReplyAction="http://tempuri.org/IRetailSystem/GetContractDraftCreationVisibilityResponse")]
        bool GetContractDraftCreationVisibility(int estimateRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetContractDraftCreationVisibility", ReplyAction="http://tempuri.org/IRetailSystem/GetContractDraftCreationVisibilityResponse")]
        System.Threading.Tasks.Task<bool> GetContractDraftCreationVisibilityAsync(int estimateRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetFinalContractCreationVisibility", ReplyAction="http://tempuri.org/IRetailSystem/GetFinalContractCreationVisibilityResponse")]
        bool GetFinalContractCreationVisibility(int estimateRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetFinalContractCreationVisibility", ReplyAction="http://tempuri.org/IRetailSystem/GetFinalContractCreationVisibilityResponse")]
        System.Threading.Tasks.Task<bool> GetFinalContractCreationVisibilityAsync(int estimateRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetEstimateRevisionStatus", ReplyAction="http://tempuri.org/IRetailSystem/GetEstimateRevisionStatusResponse")]
        void GetEstimateRevisionStatus(Metricon.WCF.MetriconRetailSystem.Contracts.EstimateRevisionStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetEstimateRevisionStatus", ReplyAction="http://tempuri.org/IRetailSystem/GetEstimateRevisionStatusResponse")]
        System.Threading.Tasks.Task GetEstimateRevisionStatusAsync(Metricon.WCF.MetriconRetailSystem.Contracts.EstimateRevisionStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CreateSplitStudioMRevisions", ReplyAction="http://tempuri.org/IRetailSystem/CreateSplitStudioMRevisionsResponse")]
        void CreateSplitStudioMRevisions(int estimateRevisionId, string revisionTypeIds, string assignedToUserIds, int createdbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CreateSplitStudioMRevisions", ReplyAction="http://tempuri.org/IRetailSystem/CreateSplitStudioMRevisionsResponse")]
        System.Threading.Tasks.Task CreateSplitStudioMRevisionsAsync(int estimateRevisionId, string revisionTypeIds, string assignedToUserIds, int createdbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/MergeStudioMRevisions", ReplyAction="http://tempuri.org/IRetailSystem/MergeStudioMRevisionsResponse")]
        void MergeStudioMRevisions(int estimateRevisionId, int createdbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/MergeStudioMRevisions", ReplyAction="http://tempuri.org/IRetailSystem/MergeStudioMRevisionsResponse")]
        System.Threading.Tasks.Task MergeStudioMRevisionsAsync(int estimateRevisionId, int createdbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CreateContractDraft", ReplyAction="http://tempuri.org/IRetailSystem/CreateContractDraftResponse")]
        void CreateContractDraft(int estimateRevisionId, int createdbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CreateContractDraft", ReplyAction="http://tempuri.org/IRetailSystem/CreateContractDraftResponse")]
        System.Threading.Tasks.Task CreateContractDraftAsync(int estimateRevisionId, int createdbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CreateFinalContract", ReplyAction="http://tempuri.org/IRetailSystem/CreateFinalContractResponse")]
        void CreateFinalContract(int estimateRevisionId, int createdbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CreateFinalContract", ReplyAction="http://tempuri.org/IRetailSystem/CreateFinalContractResponse")]
        System.Threading.Tasks.Task CreateFinalContractAsync(int estimateRevisionId, int createdbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CreateCscVariation", ReplyAction="http://tempuri.org/IRetailSystem/CreateCscVariationResponse")]
        void CreateCscVariation(int estimateRevisionId, int createdbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CreateCscVariation", ReplyAction="http://tempuri.org/IRetailSystem/CreateCscVariationResponse")]
        System.Threading.Tasks.Task CreateCscVariationAsync(int estimateRevisionId, int createdbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CreateStudioMRevision", ReplyAction="http://tempuri.org/IRetailSystem/CreateStudioMRevisionResponse")]
        string CreateStudioMRevision(int estimateRevisionId, int ownerId, System.DateTime appointmentDateTime, int revisionTypeId, int createdbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CreateStudioMRevision", ReplyAction="http://tempuri.org/IRetailSystem/CreateStudioMRevisionResponse")]
        System.Threading.Tasks.Task<string> CreateStudioMRevisionAsync(int estimateRevisionId, int ownerId, System.DateTime appointmentDateTime, int revisionTypeId, int createdbyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ValidateSetEstimateStatus", ReplyAction="http://tempuri.org/IRetailSystem/ValidateSetEstimateStatusResponse")]
        string ValidateSetEstimateStatus(int estimateRevisionId, int nextRevisionTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ValidateSetEstimateStatus", ReplyAction="http://tempuri.org/IRetailSystem/ValidateSetEstimateStatusResponse")]
        System.Threading.Tasks.Task<string> ValidateSetEstimateStatusAsync(int estimateRevisionId, int nextRevisionTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetCustomerDocumentType", ReplyAction="http://tempuri.org/IRetailSystem/GetCustomerDocumentTypeResponse")]
        string GetCustomerDocumentType(int estimateRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetCustomerDocumentType", ReplyAction="http://tempuri.org/IRetailSystem/GetCustomerDocumentTypeResponse")]
        System.Threading.Tasks.Task<string> GetCustomerDocumentTypeAsync(int estimateRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateCustomerDocumentDetails", ReplyAction="http://tempuri.org/IRetailSystem/UpdateCustomerDocumentDetailsResponse")]
        int UpdateCustomerDocumentDetails(Metricon.WCF.MetriconRetailSystem.Contracts.CustomerDocumentDetails document);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateCustomerDocumentDetails", ReplyAction="http://tempuri.org/IRetailSystem/UpdateCustomerDocumentDetailsResponse")]
        System.Threading.Tasks.Task<int> UpdateCustomerDocumentDetailsAsync(Metricon.WCF.MetriconRetailSystem.Contracts.CustomerDocumentDetails document);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetCustomerDocumentDetails", ReplyAction="http://tempuri.org/IRetailSystem/GetCustomerDocumentDetailsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.CustomerDocumentDetails GetCustomerDocumentDetails(int estimateRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetCustomerDocumentDetails", ReplyAction="http://tempuri.org/IRetailSystem/GetCustomerDocumentDetailsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.CustomerDocumentDetails> GetCustomerDocumentDetailsAsync(int estimateRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetRelevantPAGFromOnePAG", ReplyAction="http://tempuri.org/IRetailSystem/GetRelevantPAGFromOnePAGResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.SimplePAG[] GetRelevantPAGFromOnePAG(string estimatedetailsid, string revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetRelevantPAGFromOnePAG", ReplyAction="http://tempuri.org/IRetailSystem/GetRelevantPAGFromOnePAGResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SimplePAG[]> GetRelevantPAGFromOnePAGAsync(string estimatedetailsid, string revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CreateVariation", ReplyAction="http://tempuri.org/IRetailSystem/CreateVariationResponse")]
        void CreateVariation(int estimateRevisionId, int revisionTypeId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CreateVariation", ReplyAction="http://tempuri.org/IRetailSystem/CreateVariationResponse")]
        System.Threading.Tasks.Task CreateVariationAsync(int estimateRevisionId, int revisionTypeId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/RejectVariation", ReplyAction="http://tempuri.org/IRetailSystem/RejectVariationResponse")]
        void RejectVariation(int estimateRevisionId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/RejectVariation", ReplyAction="http://tempuri.org/IRetailSystem/RejectVariationResponse")]
        System.Threading.Tasks.Task RejectVariationAsync(int estimateRevisionId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SaveSelectedItemsFromOptionTreeToEstimate", ReplyAction="http://tempuri.org/IRetailSystem/SaveSelectedItemsFromOptionTreeToEstimateRespons" +
            "e")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] SaveSelectedItemsFromOptionTreeToEstimate(
                    string optionidstring, 
                    string standardinclusionidstring, 
                    string revisionid, 
                    string studiomanswer, 
                    string userid, 
                    string action, 
                    string derivedcost, 
                    string costbtpexcgststring, 
                    string costbtpoverwriteflagstring, 
                    string costdbcexcgststring, 
                    string costdbcoverwriteflagstring, 
                    string quantitystring, 
                    string pricestring, 
                    string isacceptedstring, 
                    string areaidstring, 
                    string groupidstring, 
                    string pricedisplaycodestring, 
                    string issiteworkstring, 
                    string productdescriptionstring, 
                    string additionalnotestring, 
                    string extradescriptionstring, 
                    string internaldescriptionstring);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SaveSelectedItemsFromOptionTreeToEstimate", ReplyAction="http://tempuri.org/IRetailSystem/SaveSelectedItemsFromOptionTreeToEstimateRespons" +
            "e")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[]> SaveSelectedItemsFromOptionTreeToEstimateAsync(
                    string optionidstring, 
                    string standardinclusionidstring, 
                    string revisionid, 
                    string studiomanswer, 
                    string userid, 
                    string action, 
                    string derivedcost, 
                    string costbtpexcgststring, 
                    string costbtpoverwriteflagstring, 
                    string costdbcexcgststring, 
                    string costdbcoverwriteflagstring, 
                    string quantitystring, 
                    string pricestring, 
                    string isacceptedstring, 
                    string areaidstring, 
                    string groupidstring, 
                    string pricedisplaycodestring, 
                    string issiteworkstring, 
                    string productdescriptionstring, 
                    string additionalnotestring, 
                    string extradescriptionstring, 
                    string internaldescriptionstring);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ReplaceSaveSelectedItemsFromOptionTreeToEstimate" +
            "", ReplyAction="http://tempuri.org/IRetailSystem/ReplaceSaveSelectedItemsFromOptionTreeToEstimate" +
            "Response")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] ReplaceSaveSelectedItemsFromOptionTreeToEstimate(
                    string sourceEstimateRevisionDetailsId, 
                    string optionidstring, 
                    string standardinclusionidstring, 
                    string revisionid, 
                    string studiomanswer, 
                    string userid, 
                    string action, 
                    string derivedcost, 
                    string costbtpexcgst, 
                    string costdbcexcgst, 
                    string quantitystring, 
                    string pricestring, 
                    string isacceptedstring, 
                    string areaidstring, 
                    string groupidstring, 
                    string pricedisplaycodestring, 
                    string issiteworkstring, 
                    string productdescriptionstring, 
                    string additionalnotestring, 
                    string extradescriptionstring, 
                    string internaldescriptionstring, 
                    string copyquantity, 
                    string copyadditionalnotes, 
                    string copyextradescription, 
                    string copyinternalnotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ReplaceSaveSelectedItemsFromOptionTreeToEstimate" +
            "", ReplyAction="http://tempuri.org/IRetailSystem/ReplaceSaveSelectedItemsFromOptionTreeToEstimate" +
            "Response")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[]> ReplaceSaveSelectedItemsFromOptionTreeToEstimateAsync(
                    string sourceEstimateRevisionDetailsId, 
                    string optionidstring, 
                    string standardinclusionidstring, 
                    string revisionid, 
                    string studiomanswer, 
                    string userid, 
                    string action, 
                    string derivedcost, 
                    string costbtpexcgst, 
                    string costdbcexcgst, 
                    string quantitystring, 
                    string pricestring, 
                    string isacceptedstring, 
                    string areaidstring, 
                    string groupidstring, 
                    string pricedisplaycodestring, 
                    string issiteworkstring, 
                    string productdescriptionstring, 
                    string additionalnotestring, 
                    string extradescriptionstring, 
                    string internaldescriptionstring, 
                    string copyquantity, 
                    string copyadditionalnotes, 
                    string copyextradescription, 
                    string copyinternalnotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CheckRevisionTypeAllowToAddNSR", ReplyAction="http://tempuri.org/IRetailSystem/CheckRevisionTypeAllowToAddNSRResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.RevisionTypePermission CheckRevisionTypeAllowToAddNSR(int revisontypeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CheckRevisionTypeAllowToAddNSR", ReplyAction="http://tempuri.org/IRetailSystem/CheckRevisionTypeAllowToAddNSRResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.RevisionTypePermission> CheckRevisionTypeAllowToAddNSRAsync(int revisontypeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ValidateAcceptFlagForRevision", ReplyAction="http://tempuri.org/IRetailSystem/ValidateAcceptFlagForRevisionResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[] ValidateAcceptFlagForRevision(int estimaterevisionid, int userroleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ValidateAcceptFlagForRevision", ReplyAction="http://tempuri.org/IRetailSystem/ValidateAcceptFlagForRevisionResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[]> ValidateAcceptFlagForRevisionAsync(int estimaterevisionid, int userroleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ValidateStudioMRevisions", ReplyAction="http://tempuri.org/IRetailSystem/ValidateStudioMRevisionsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[] ValidateStudioMRevisions(int estimaterevisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ValidateStudioMRevisions", ReplyAction="http://tempuri.org/IRetailSystem/ValidateStudioMRevisionsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[]> ValidateStudioMRevisionsAsync(int estimaterevisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ValidateAppointmentDate", ReplyAction="http://tempuri.org/IRetailSystem/ValidateAppointmentDateResponse")]
        bool ValidateAppointmentDate(int estimaterevisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ValidateAppointmentDate", ReplyAction="http://tempuri.org/IRetailSystem/ValidateAppointmentDateResponse")]
        System.Threading.Tasks.Task<bool> ValidateAppointmentDateAsync(int estimaterevisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetNextEstimateRevision", ReplyAction="http://tempuri.org/IRetailSystem/GetNextEstimateRevisionResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.NextRevision[] GetNextEstimateRevision(int estimateRevisionId, int statusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetNextEstimateRevision", ReplyAction="http://tempuri.org/IRetailSystem/GetNextEstimateRevisionResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.NextRevision[]> GetNextEstimateRevisionAsync(int estimateRevisionId, int statusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAuditLogs", ReplyAction="http://tempuri.org/IRetailSystem/GetAuditLogsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.AuditLog[] GetAuditLogs(int revisionid, int revisiondetailid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAuditLogs", ReplyAction="http://tempuri.org/IRetailSystem/GetAuditLogsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.AuditLog[]> GetAuditLogsAsync(int revisionid, int revisiondetailid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetDeletedItems", ReplyAction="http://tempuri.org/IRetailSystem/GetDeletedItemsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.DeletedItem[] GetDeletedItems(int revisionid, Metricon.WCF.MetriconRetailSystem.Contracts.RESULT_TYPE resulttype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetDeletedItems", ReplyAction="http://tempuri.org/IRetailSystem/GetDeletedItemsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.DeletedItem[]> GetDeletedItemsAsync(int revisionid, Metricon.WCF.MetriconRetailSystem.Contracts.RESULT_TYPE resulttype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ReAddDeletedEstimateItem", ReplyAction="http://tempuri.org/IRetailSystem/ReAddDeletedEstimateItemResponse")]
        bool ReAddDeletedEstimateItem(int sourceEstimateRevisionId, int targetEstimateRevisionId, int OptionId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ReAddDeletedEstimateItem", ReplyAction="http://tempuri.org/IRetailSystem/ReAddDeletedEstimateItemResponse")]
        System.Threading.Tasks.Task<bool> ReAddDeletedEstimateItemAsync(int sourceEstimateRevisionId, int targetEstimateRevisionId, int OptionId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ReAddDeletedMasterPromotionEstimateItem", ReplyAction="http://tempuri.org/IRetailSystem/ReAddDeletedMasterPromotionEstimateItemResponse")]
        bool ReAddDeletedMasterPromotionEstimateItem(int estimateRevisionId, int OptionId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ReAddDeletedMasterPromotionEstimateItem", ReplyAction="http://tempuri.org/IRetailSystem/ReAddDeletedMasterPromotionEstimateItemResponse")]
        System.Threading.Tasks.Task<bool> ReAddDeletedMasterPromotionEstimateItemAsync(int estimateRevisionId, int OptionId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAllFacadeFromRevisonID", ReplyAction="http://tempuri.org/IRetailSystem/GetAllFacadeFromRevisonIDResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.SQSHome[] GetAllFacadeFromRevisonID(int revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAllFacadeFromRevisonID", ReplyAction="http://tempuri.org/IRetailSystem/GetAllFacadeFromRevisonIDResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SQSHome[]> GetAllFacadeFromRevisonIDAsync(int revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAllAvailableHomeByState", ReplyAction="http://tempuri.org/IRetailSystem/GetAllAvailableHomeByStateResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.SQSHome[] GetAllAvailableHomeByState(int stateid, string searchText, bool showdisplayhomes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAllAvailableHomeByState", ReplyAction="http://tempuri.org/IRetailSystem/GetAllAvailableHomeByStateResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SQSHome[]> GetAllAvailableHomeByStateAsync(int stateid, string searchText, bool showdisplayhomes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetHomeFullNameByState", ReplyAction="http://tempuri.org/IRetailSystem/GetHomeFullNameByStateResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.SQSHome[] GetHomeFullNameByState(int stateid, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetHomeFullNameByState", ReplyAction="http://tempuri.org/IRetailSystem/GetHomeFullNameByStateResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SQSHome[]> GetHomeFullNameByStateAsync(int stateid, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAreaNameWithAll", ReplyAction="http://tempuri.org/IRetailSystem/GetAreaNameWithAllResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.SQSArea[] GetAreaNameWithAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAreaNameWithAll", ReplyAction="http://tempuri.org/IRetailSystem/GetAreaNameWithAllResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SQSArea[]> GetAreaNameWithAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetGroupNameWithAll", ReplyAction="http://tempuri.org/IRetailSystem/GetGroupNameWithAllResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.SQSGroup[] GetGroupNameWithAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetGroupNameWithAll", ReplyAction="http://tempuri.org/IRetailSystem/GetGroupNameWithAllResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SQSGroup[]> GetGroupNameWithAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CheckFacadeConfigurationDifference", ReplyAction="http://tempuri.org/IRetailSystem/CheckFacadeConfigurationDifferenceResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[] CheckFacadeConfigurationDifference(int revisionid, int newfacadehomeid, string effectivedate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CheckFacadeConfigurationDifference", ReplyAction="http://tempuri.org/IRetailSystem/CheckFacadeConfigurationDifferenceResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[]> CheckFacadeConfigurationDifferenceAsync(int revisionid, int newfacadehomeid, string effectivedate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CheckHomeConfigurationDifference", ReplyAction="http://tempuri.org/IRetailSystem/CheckHomeConfigurationDifferenceResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[] CheckHomeConfigurationDifference(int revisionid, int newfacadehomeid, string effectivedate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CheckHomeConfigurationDifference", ReplyAction="http://tempuri.org/IRetailSystem/CheckHomeConfigurationDifferenceResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[]> CheckHomeConfigurationDifferenceAsync(int revisionid, int newfacadehomeid, string effectivedate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ChangeFacade", ReplyAction="http://tempuri.org/IRetailSystem/ChangeFacadeResponse")]
        bool ChangeFacade(int revisionid, int newfacadehomeid, string detailIDsSelected, string detailOptionsSeleced, string detailPricesSeleced, string effectivedate, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ChangeFacade", ReplyAction="http://tempuri.org/IRetailSystem/ChangeFacadeResponse")]
        System.Threading.Tasks.Task<bool> ChangeFacadeAsync(int revisionid, int newfacadehomeid, string detailIDsSelected, string detailOptionsSeleced, string detailPricesSeleced, string effectivedate, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ChangeHome", ReplyAction="http://tempuri.org/IRetailSystem/ChangeHomeResponse")]
        bool ChangeHome(int revisionid, int newfacadehomeid, string detailIDsSelected, string detailOptionsSeleced, string detailPricesSeleced, string effectivedate, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ChangeHome", ReplyAction="http://tempuri.org/IRetailSystem/ChangeHomeResponse")]
        System.Threading.Tasks.Task<bool> ChangeHomeAsync(int revisionid, int newfacadehomeid, string detailIDsSelected, string detailOptionsSeleced, string detailPricesSeleced, string effectivedate, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetContractType", ReplyAction="http://tempuri.org/IRetailSystem/GetContractTypeResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.ContractType[] GetContractType(string configCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetContractType", ReplyAction="http://tempuri.org/IRetailSystem/GetContractTypeResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ContractType[]> GetContractTypeAsync(string configCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateContractType", ReplyAction="http://tempuri.org/IRetailSystem/UpdateContractTypeResponse")]
        bool UpdateContractType(int revisionid, string contracttype, string jobflowtype, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateContractType", ReplyAction="http://tempuri.org/IRetailSystem/UpdateContractTypeResponse")]
        System.Threading.Tasks.Task<bool> UpdateContractTypeAsync(int revisionid, string contracttype, string jobflowtype, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetHomeName", ReplyAction="http://tempuri.org/IRetailSystem/GetHomeNameResponse")]
        string GetHomeName(int revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetHomeName", ReplyAction="http://tempuri.org/IRetailSystem/GetHomeNameResponse")]
        System.Threading.Tasks.Task<string> GetHomeNameAsync(int revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateHomeName", ReplyAction="http://tempuri.org/IRetailSystem/UpdateHomeNameResponse")]
        bool UpdateHomeName(int revisionid, string homename, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateHomeName", ReplyAction="http://tempuri.org/IRetailSystem/UpdateHomeNameResponse")]
        System.Threading.Tasks.Task<bool> UpdateHomeNameAsync(int revisionid, string homename, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CopyEstimateCheckDifference", ReplyAction="http://tempuri.org/IRetailSystem/CopyEstimateCheckDifferenceResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[] CopyEstimateCheckDifference(string sourceEstimatenumber, string destinationEstimatenumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CopyEstimateCheckDifference", ReplyAction="http://tempuri.org/IRetailSystem/CopyEstimateCheckDifferenceResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[]> CopyEstimateCheckDifferenceAsync(string sourceEstimatenumber, string destinationEstimatenumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CopyEstimate", ReplyAction="http://tempuri.org/IRetailSystem/CopyEstimateResponse")]
        bool CopyEstimate(string sourceEstimatenumber, string destinationEstimatenumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CopyEstimate", ReplyAction="http://tempuri.org/IRetailSystem/CopyEstimateResponse")]
        System.Threading.Tasks.Task<bool> CopyEstimateAsync(string sourceEstimatenumber, string destinationEstimatenumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAreaSurcharge", ReplyAction="http://tempuri.org/IRetailSystem/GetAreaSurchargeResponse")]
        decimal[] GetAreaSurcharge(int revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAreaSurcharge", ReplyAction="http://tempuri.org/IRetailSystem/GetAreaSurchargeResponse")]
        System.Threading.Tasks.Task<decimal[]> GetAreaSurchargeAsync(int revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetPagByID", ReplyAction="http://tempuri.org/IRetailSystem/GetPagByIDResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails GetPagByID(int estimaterevisionid, int optionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetPagByID", ReplyAction="http://tempuri.org/IRetailSystem/GetPagByIDResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails> GetPagByIDAsync(int estimaterevisionid, int optionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetUpgradeOptionListForStandardInclusion", ReplyAction="http://tempuri.org/IRetailSystem/GetUpgradeOptionListForStandardInclusionResponse" +
            "")]
        Metricon.WCF.MetriconRetailSystem.Contracts.SimplePAG[] GetUpgradeOptionListForStandardInclusion(int estimaterevisionid, int originateoptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetUpgradeOptionListForStandardInclusion", ReplyAction="http://tempuri.org/IRetailSystem/GetUpgradeOptionListForStandardInclusionResponse" +
            "")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SimplePAG[]> GetUpgradeOptionListForStandardInclusionAsync(int estimaterevisionid, int originateoptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetStudioMQandA", ReplyAction="http://tempuri.org/IRetailSystem/GetStudioMQandAResponse")]
        string GetStudioMQandA(int optionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetStudioMQandA", ReplyAction="http://tempuri.org/IRetailSystem/GetStudioMQandAResponse")]
        System.Threading.Tasks.Task<string> GetStudioMQandAAsync(int optionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/Sharepoint_GetFileList", ReplyAction="http://tempuri.org/IRetailSystem/Sharepoint_GetFileListResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.SharepointDoc[] Sharepoint_GetFileList(string opportunityid, string contractnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/Sharepoint_GetFileList", ReplyAction="http://tempuri.org/IRetailSystem/Sharepoint_GetFileListResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SharepointDoc[]> Sharepoint_GetFileListAsync(string opportunityid, string contractnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/Sharepoint_SharepointUploadFile", ReplyAction="http://tempuri.org/IRetailSystem/Sharepoint_SharepointUploadFileResponse")]
        bool Sharepoint_SharepointUploadFile(string filename, byte[] contents, string oldname, string opportunityid, string doccategory, string doctype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/Sharepoint_SharepointUploadFile", ReplyAction="http://tempuri.org/IRetailSystem/Sharepoint_SharepointUploadFileResponse")]
        System.Threading.Tasks.Task<bool> Sharepoint_SharepointUploadFileAsync(string filename, byte[] contents, string oldname, string opportunityid, string doccategory, string doctype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/Sharepoint_DeleteFileFromSharepointLibrary", ReplyAction="http://tempuri.org/IRetailSystem/Sharepoint_DeleteFileFromSharepointLibraryRespon" +
            "se")]
        bool Sharepoint_DeleteFileFromSharepointLibrary(Metricon.WCF.MetriconRetailSystem.Contracts.SharepointDoc doc, string opportunityid, string contractnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/Sharepoint_DeleteFileFromSharepointLibrary", ReplyAction="http://tempuri.org/IRetailSystem/Sharepoint_DeleteFileFromSharepointLibraryRespon" +
            "se")]
        System.Threading.Tasks.Task<bool> Sharepoint_DeleteFileFromSharepointLibraryAsync(Metricon.WCF.MetriconRetailSystem.Contracts.SharepointDoc doc, string opportunityid, string contractnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/Sharepoint_GetSalesDocumentType", ReplyAction="http://tempuri.org/IRetailSystem/Sharepoint_GetSalesDocumentTypeResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.SharepointDocumentType[] Sharepoint_GetSalesDocumentType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/Sharepoint_GetSalesDocumentType", ReplyAction="http://tempuri.org/IRetailSystem/Sharepoint_GetSalesDocumentTypeResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SharepointDocumentType[]> Sharepoint_GetSalesDocumentTypeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SendNotificationEmail", ReplyAction="http://tempuri.org/IRetailSystem/SendNotificationEmailResponse")]
        bool SendNotificationEmail(string templateobjectid, string actionuserfullname, string recipientfullname, string contractnumber, string templateobjecttype, string emailtype, string estimatenumber, string revisionnumber, string comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SendNotificationEmail", ReplyAction="http://tempuri.org/IRetailSystem/SendNotificationEmailResponse")]
        System.Threading.Tasks.Task<bool> SendNotificationEmailAsync(string templateobjectid, string actionuserfullname, string recipientfullname, string contractnumber, string templateobjecttype, string emailtype, string estimatenumber, string revisionnumber, string comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SendCrmEmail", ReplyAction="http://tempuri.org/IRetailSystem/SendCrmEmailResponse")]
        bool SendCrmEmail(System.Guid contractId, int recipientId, string subject, string body);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SendCrmEmail", ReplyAction="http://tempuri.org/IRetailSystem/SendCrmEmailResponse")]
        System.Threading.Tasks.Task<bool> SendCrmEmailAsync(System.Guid contractId, int recipientId, string subject, string body);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetStudioMQuestionForAProduct", ReplyAction="http://tempuri.org/IRetailSystem/GetStudioMQuestionForAProductResponse")]
        string GetStudioMQuestionForAProduct(string pproductid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetStudioMQuestionForAProduct", ReplyAction="http://tempuri.org/IRetailSystem/GetStudioMQuestionForAProductResponse")]
        System.Threading.Tasks.Task<string> GetStudioMQuestionForAProductAsync(string pproductid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetInLieuStandardPromotionItems", ReplyAction="http://tempuri.org/IRetailSystem/GetInLieuStandardPromotionItemsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.PAG[] GetInLieuStandardPromotionItems(int estimaterevisionid, int originateoptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetInLieuStandardPromotionItems", ReplyAction="http://tempuri.org/IRetailSystem/GetInLieuStandardPromotionItemsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.PAG[]> GetInLieuStandardPromotionItemsAsync(int estimaterevisionid, int originateoptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetRoleAccessModule", ReplyAction="http://tempuri.org/IRetailSystem/GetRoleAccessModuleResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.RoleAccessModule GetRoleAccessModule(int roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetRoleAccessModule", ReplyAction="http://tempuri.org/IRetailSystem/GetRoleAccessModuleResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.RoleAccessModule> GetRoleAccessModuleAsync(int roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetItemRemoveReason", ReplyAction="http://tempuri.org/IRetailSystem/GetItemRemoveReasonResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.ItemRemoveReason[] GetItemRemoveReason();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetItemRemoveReason", ReplyAction="http://tempuri.org/IRetailSystem/GetItemRemoveReasonResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ItemRemoveReason[]> GetItemRemoveReasonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetItemsNeedSetDefaultAnswer", ReplyAction="http://tempuri.org/IRetailSystem/GetItemsNeedSetDefaultAnswerResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.StudioMItem[] GetItemsNeedSetDefaultAnswer(string revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetItemsNeedSetDefaultAnswer", ReplyAction="http://tempuri.org/IRetailSystem/GetItemsNeedSetDefaultAnswerResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.StudioMItem[]> GetItemsNeedSetDefaultAnswerAsync(string revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SetDefaultAnswerForEstimateRevision", ReplyAction="http://tempuri.org/IRetailSystem/SetDefaultAnswerForEstimateRevisionResponse")]
        bool SetDefaultAnswerForEstimateRevision(string idstring, string studiomstring, string usercode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SetDefaultAnswerForEstimateRevision", ReplyAction="http://tempuri.org/IRetailSystem/SetDefaultAnswerForEstimateRevisionResponse")]
        System.Threading.Tasks.Task<bool> SetDefaultAnswerForEstimateRevisionAsync(string idstring, string studiomstring, string usercode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/RegisterEvent", ReplyAction="http://tempuri.org/IRetailSystem/RegisterEventResponse")]
        void RegisterEvent(string action, int revisionid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/RegisterEvent", ReplyAction="http://tempuri.org/IRetailSystem/RegisterEventResponse")]
        System.Threading.Tasks.Task RegisterEventAsync(string action, int revisionid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetStudioMAppointmentTime", ReplyAction="http://tempuri.org/IRetailSystem/GetStudioMAppointmentTimeResponse")]
        System.DateTime GetStudioMAppointmentTime(string contractNumber, string eventNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetStudioMAppointmentTime", ReplyAction="http://tempuri.org/IRetailSystem/GetStudioMAppointmentTimeResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetStudioMAppointmentTimeAsync(string contractNumber, string eventNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateEstimateDetailsDescription", ReplyAction="http://tempuri.org/IRetailSystem/UpdateEstimateDetailsDescriptionResponse")]
        void UpdateEstimateDetailsDescription(Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] items, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateEstimateDetailsDescription", ReplyAction="http://tempuri.org/IRetailSystem/UpdateEstimateDetailsDescriptionResponse")]
        System.Threading.Tasks.Task UpdateEstimateDetailsDescriptionAsync(Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] items, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/MoveEstimateDetailItem", ReplyAction="http://tempuri.org/IRetailSystem/MoveEstimateDetailItemResponse")]
        bool MoveEstimateDetailItem(int revisionDetailsIdSource, int revisionDetailsIdTarget, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/MoveEstimateDetailItem", ReplyAction="http://tempuri.org/IRetailSystem/MoveEstimateDetailItemResponse")]
        System.Threading.Tasks.Task<bool> MoveEstimateDetailItemAsync(int revisionDetailsIdSource, int revisionDetailsIdTarget, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/DocuSign_GetDocumentInfo", ReplyAction="http://tempuri.org/IRetailSystem/DocuSign_GetDocumentInfoResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.DocuSignDocStatusInfo[] DocuSign_GetDocumentInfo(string revisionid, string estimateid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/DocuSign_GetDocumentInfo", ReplyAction="http://tempuri.org/IRetailSystem/DocuSign_GetDocumentInfoResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.DocuSignDocStatusInfo[]> DocuSign_GetDocumentInfoAsync(string revisionid, string estimateid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/DocuSign_PushDocumentToTheProcessQueue", ReplyAction="http://tempuri.org/IRetailSystem/DocuSign_PushDocumentToTheProcessQueueResponse")]
        bool DocuSign_PushDocumentToTheProcessQueue(string revisionid, string printtype, string documenttype, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/DocuSign_PushDocumentToTheProcessQueue", ReplyAction="http://tempuri.org/IRetailSystem/DocuSign_PushDocumentToTheProcessQueueResponse")]
        System.Threading.Tasks.Task<bool> DocuSign_PushDocumentToTheProcessQueueAsync(string revisionid, string printtype, string documenttype, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetPromotionProductByMasterPromotionRevisionDeta" +
            "ilsID", ReplyAction="http://tempuri.org/IRetailSystem/GetPromotionProductByMasterPromotionRevisionDeta" +
            "ilsIDResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] GetPromotionProductByMasterPromotionRevisionDetailsID(string revisiondetailsid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetPromotionProductByMasterPromotionRevisionDeta" +
            "ilsID", ReplyAction="http://tempuri.org/IRetailSystem/GetPromotionProductByMasterPromotionRevisionDeta" +
            "ilsIDResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[]> GetPromotionProductByMasterPromotionRevisionDetailsIDAsync(string revisiondetailsid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetExistingPromotionProductByMasterPromotionRevi" +
            "sionDetailsID", ReplyAction="http://tempuri.org/IRetailSystem/GetExistingPromotionProductByMasterPromotionRevi" +
            "sionDetailsIDResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.PromotionPAG[] GetExistingPromotionProductByMasterPromotionRevisionDetailsID(string revisiondetailsid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetExistingPromotionProductByMasterPromotionRevi" +
            "sionDetailsID", ReplyAction="http://tempuri.org/IRetailSystem/GetExistingPromotionProductByMasterPromotionRevi" +
            "sionDetailsIDResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.PromotionPAG[]> GetExistingPromotionProductByMasterPromotionRevisionDetailsIDAsync(string revisiondetailsid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetEstimateDetailsByIDString", ReplyAction="http://tempuri.org/IRetailSystem/GetEstimateDetailsByIDStringResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] GetEstimateDetailsByIDString(string selectedrevisiondetailsid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetEstimateDetailsByIDString", ReplyAction="http://tempuri.org/IRetailSystem/GetEstimateDetailsByIDStringResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[]> GetEstimateDetailsByIDStringAsync(string selectedrevisiondetailsid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/DeleteMasterPromotionItem", ReplyAction="http://tempuri.org/IRetailSystem/DeleteMasterPromotionItemResponse")]
        bool DeleteMasterPromotionItem(string masterpromotionitemid, string selectedpromotionitemids, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/DeleteMasterPromotionItem", ReplyAction="http://tempuri.org/IRetailSystem/DeleteMasterPromotionItemResponse")]
        System.Threading.Tasks.Task<bool> DeleteMasterPromotionItemAsync(string masterpromotionitemid, string selectedpromotionitemids, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/DocuSign_RemoveDocumentFromTheProcessQueue", ReplyAction="http://tempuri.org/IRetailSystem/DocuSign_RemoveDocumentFromTheProcessQueueRespon" +
            "se")]
        bool DocuSign_RemoveDocumentFromTheProcessQueue(string integrationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/DocuSign_RemoveDocumentFromTheProcessQueue", ReplyAction="http://tempuri.org/IRetailSystem/DocuSign_RemoveDocumentFromTheProcessQueueRespon" +
            "se")]
        System.Threading.Tasks.Task<bool> DocuSign_RemoveDocumentFromTheProcessQueueAsync(string integrationid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetCRMContactForAccountAsSigner", ReplyAction="http://tempuri.org/IRetailSystem/GetCRMContactForAccountAsSignerResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.CRMContact[] GetCRMContactForAccountAsSigner(System.Guid accountid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetCRMContactForAccountAsSigner", ReplyAction="http://tempuri.org/IRetailSystem/GetCRMContactForAccountAsSignerResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.CRMContact[]> GetCRMContactForAccountAsSignerAsync(System.Guid accountid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/DocuSign_GetEnvelopeHistory", ReplyAction="http://tempuri.org/IRetailSystem/DocuSign_GetEnvelopeHistoryResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.DocuSignHistory[] DocuSign_GetEnvelopeHistory(string envelopeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/DocuSign_GetEnvelopeHistory", ReplyAction="http://tempuri.org/IRetailSystem/DocuSign_GetEnvelopeHistoryResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.DocuSignHistory[]> DocuSign_GetEnvelopeHistoryAsync(string envelopeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/DocuSign_GetEnvelopeHistoryByRevision", ReplyAction="http://tempuri.org/IRetailSystem/DocuSign_GetEnvelopeHistoryByRevisionResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.DocuSignHistory[] DocuSign_GetEnvelopeHistoryByRevision(string revisionid, string versiontype, string printtype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/DocuSign_GetEnvelopeHistoryByRevision", ReplyAction="http://tempuri.org/IRetailSystem/DocuSign_GetEnvelopeHistoryByRevisionResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.DocuSignHistory[]> DocuSign_GetEnvelopeHistoryByRevisionAsync(string revisionid, string versiontype, string printtype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/DocuSign_ValidateSignerAndDocuemnt", ReplyAction="http://tempuri.org/IRetailSystem/DocuSign_ValidateSignerAndDocuemntResponse")]
        string DocuSign_ValidateSignerAndDocuemnt(string estimateid, string versionnumber, string recipientname, string recipienttype, string recipientaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/DocuSign_ValidateSignerAndDocuemnt", ReplyAction="http://tempuri.org/IRetailSystem/DocuSign_ValidateSignerAndDocuemntResponse")]
        System.Threading.Tasks.Task<string> DocuSign_ValidateSignerAndDocuemntAsync(string estimateid, string versionnumber, string recipientname, string recipienttype, string recipientaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SearchSpecificJob", ReplyAction="http://tempuri.org/IRetailSystem/SearchSpecificJobResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateGridItem[] SearchSpecificJob(string customernumber, string contractnumber, string SelectedSalesConsultantId, string LotNumber, string StreetName, string Suburb, string businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SearchSpecificJob", ReplyAction="http://tempuri.org/IRetailSystem/SearchSpecificJobResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateGridItem[]> SearchSpecificJobAsync(string customernumber, string contractnumber, string SelectedSalesConsultantId, string LotNumber, string StreetName, string Suburb, string businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ResetEditEstimateUserID", ReplyAction="http://tempuri.org/IRetailSystem/ResetEditEstimateUserIDResponse")]
        int ResetEditEstimateUserID(int estimateRevisionId, int editEstimateUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ResetEditEstimateUserID", ReplyAction="http://tempuri.org/IRetailSystem/ResetEditEstimateUserIDResponse")]
        System.Threading.Tasks.Task<int> ResetEditEstimateUserIDAsync(int estimateRevisionId, int editEstimateUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ApplyRounding", ReplyAction="http://tempuri.org/IRetailSystem/ApplyRoundingResponse")]
        bool ApplyRounding(int revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ApplyRounding", ReplyAction="http://tempuri.org/IRetailSystem/ApplyRoundingResponse")]
        System.Threading.Tasks.Task<bool> ApplyRoundingAsync(int revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetEstimateDisclaimerUpdateDetails", ReplyAction="http://tempuri.org/IRetailSystem/GetEstimateDisclaimerUpdateDetailsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDisclaimerUpdateDetail GetEstimateDisclaimerUpdateDetails(int revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetEstimateDisclaimerUpdateDetails", ReplyAction="http://tempuri.org/IRetailSystem/GetEstimateDisclaimerUpdateDetailsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDisclaimerUpdateDetail> GetEstimateDisclaimerUpdateDetailsAsync(int revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SaveDisclaimerUpdateDetails", ReplyAction="http://tempuri.org/IRetailSystem/SaveDisclaimerUpdateDetailsResponse")]
        bool SaveDisclaimerUpdateDetails(int revisionId, int typeId, int disclaimerNewId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SaveDisclaimerUpdateDetails", ReplyAction="http://tempuri.org/IRetailSystem/SaveDisclaimerUpdateDetailsResponse")]
        System.Threading.Tasks.Task<bool> SaveDisclaimerUpdateDetailsAsync(int revisionId, int typeId, int disclaimerNewId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetBusinessUnits", ReplyAction="http://tempuri.org/IRetailSystem/GetBusinessUnitsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.GenericClassCodeName[] GetBusinessUnits(int regionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetBusinessUnits", ReplyAction="http://tempuri.org/IRetailSystem/GetBusinessUnitsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.GenericClassCodeName[]> GetBusinessUnitsAsync(int regionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetBCForecastDate", ReplyAction="http://tempuri.org/IRetailSystem/GetBCForecastDateResponse")]
        string GetBCForecastDate(string bcContractNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetBCForecastDate", ReplyAction="http://tempuri.org/IRetailSystem/GetBCForecastDateResponse")]
        System.Threading.Tasks.Task<string> GetBCForecastDateAsync(string bcContractNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/AcceptOriginalEstimate", ReplyAction="http://tempuri.org/IRetailSystem/AcceptOriginalEstimateResponse")]
        void AcceptOriginalEstimate(int estimateId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/AcceptOriginalEstimate", ReplyAction="http://tempuri.org/IRetailSystem/AcceptOriginalEstimateResponse")]
        System.Threading.Tasks.Task AcceptOriginalEstimateAsync(int estimateId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/AssignQueuedEstimate", ReplyAction="http://tempuri.org/IRetailSystem/AssignQueuedEstimateResponse")]
        int AssignQueuedEstimate(int queueId, int userId, int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/AssignQueuedEstimate", ReplyAction="http://tempuri.org/IRetailSystem/AssignQueuedEstimateResponse")]
        System.Threading.Tasks.Task<int> AssignQueuedEstimateAsync(int queueId, int userId, int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/AssignWorkingEstimate", ReplyAction="http://tempuri.org/IRetailSystem/AssignWorkingEstimateResponse")]
        void AssignWorkingEstimate(int estimateRevisionId, int userId, int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/AssignWorkingEstimate", ReplyAction="http://tempuri.org/IRetailSystem/AssignWorkingEstimateResponse")]
        System.Threading.Tasks.Task AssignWorkingEstimateAsync(int estimateRevisionId, int userId, int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CompleteEstimate", ReplyAction="http://tempuri.org/IRetailSystem/CompleteEstimateResponse")]
        void CompleteEstimate(int revisionId, int userId, int statusId, int statusReasonId, int revisionTypeId, int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CompleteEstimate", ReplyAction="http://tempuri.org/IRetailSystem/CompleteEstimateResponse")]
        System.Threading.Tasks.Task CompleteEstimateAsync(int revisionId, int userId, int statusId, int statusReasonId, int revisionTypeId, int ownerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetQueuedEstimates", ReplyAction="http://tempuri.org/IRetailSystem/GetQueuedEstimatesResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateGridItem[] GetQueuedEstimates(int revisionTypeId, int regionId, int roleId, string customerNumber, string contractNumber, int salesConsultantId, string lotNumber, string streetName, string suburb, string businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetQueuedEstimates", ReplyAction="http://tempuri.org/IRetailSystem/GetQueuedEstimatesResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateGridItem[]> GetQueuedEstimatesAsync(int revisionTypeId, int regionId, int roleId, string customerNumber, string contractNumber, int salesConsultantId, string lotNumber, string streetName, string suburb, string businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAssignedEstimates", ReplyAction="http://tempuri.org/IRetailSystem/GetAssignedEstimatesResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateGridItem[] GetAssignedEstimates(int revisionTypeId, int roleId, int statusId, int userId, int regionId, string customerNumber, string contractNumber, int salesConsultantId, string lotNumber, string streetName, string suburb, string businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAssignedEstimates", ReplyAction="http://tempuri.org/IRetailSystem/GetAssignedEstimatesResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateGridItem[]> GetAssignedEstimatesAsync(int revisionTypeId, int roleId, int statusId, int userId, int regionId, string customerNumber, string contractNumber, int salesConsultantId, string lotNumber, string streetName, string suburb, string businessUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetEstimateHeader", ReplyAction="http://tempuri.org/IRetailSystem/GetEstimateHeaderResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateHeader GetEstimateHeader(int revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetEstimateHeader", ReplyAction="http://tempuri.org/IRetailSystem/GetEstimateHeaderResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateHeader> GetEstimateHeaderAsync(int revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetEstimateDetails", ReplyAction="http://tempuri.org/IRetailSystem/GetEstimateDetailsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] GetEstimateDetails(int revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetEstimateDetails", ReplyAction="http://tempuri.org/IRetailSystem/GetEstimateDetailsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[]> GetEstimateDetailsAsync(int revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetEstimatesRevisions", ReplyAction="http://tempuri.org/IRetailSystem/GetEstimatesRevisionsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateHeader[] GetEstimatesRevisions(int estimateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetEstimatesRevisions", ReplyAction="http://tempuri.org/IRetailSystem/GetEstimatesRevisionsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateHeader[]> GetEstimatesRevisionsAsync(int estimateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UndoThisRevision", ReplyAction="http://tempuri.org/IRetailSystem/UndoThisRevisionResponse")]
        string UndoThisRevision(int bcContractNumber, int estimateId, int estimateRevisionId, int userId, string reasonComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UndoThisRevision", ReplyAction="http://tempuri.org/IRetailSystem/UndoThisRevisionResponse")]
        System.Threading.Tasks.Task<string> UndoThisRevisionAsync(int bcContractNumber, int estimateId, int estimateRevisionId, int userId, string reasonComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UndoThisRevisionValidate", ReplyAction="http://tempuri.org/IRetailSystem/UndoThisRevisionValidateResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateHeader[] UndoThisRevisionValidate(int estimateId, int bcContractNumber, int estimateRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UndoThisRevisionValidate", ReplyAction="http://tempuri.org/IRetailSystem/UndoThisRevisionValidateResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateHeader[]> UndoThisRevisionValidateAsync(int estimateId, int bcContractNumber, int estimateRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UndoCurrentMilestone", ReplyAction="http://tempuri.org/IRetailSystem/UndoCurrentMilestoneResponse")]
        string UndoCurrentMilestone(int estimateRevisionId, int userId, string reasonComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UndoCurrentMilestone", ReplyAction="http://tempuri.org/IRetailSystem/UndoCurrentMilestoneResponse")]
        System.Threading.Tasks.Task<string> UndoCurrentMilestoneAsync(int estimateRevisionId, int userId, string reasonComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UndoSetAsContract", ReplyAction="http://tempuri.org/IRetailSystem/UndoSetAsContractResponse")]
        string UndoSetAsContract(int estimateRevisionId, int userId, string reasonComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UndoSetAsContract", ReplyAction="http://tempuri.org/IRetailSystem/UndoSetAsContractResponse")]
        System.Threading.Tasks.Task<string> UndoSetAsContractAsync(int estimateRevisionId, int userId, string reasonComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateEstimateDetails", ReplyAction="http://tempuri.org/IRetailSystem/UpdateEstimateDetailsResponse")]
        void UpdateEstimateDetails(
                    int revisionDetailsId, 
                    decimal price, 
                    decimal quantity, 
                    decimal totalprice, 
                    string productDescription, 
                    string extraDescription, 
                    string internalDescription, 
                    string additionalnotes, 
                    string studioManswer, 
                    int itemaccepted, 
                    int categoryid, 
                    int groupid, 
                    int pricedisplayid, 
                    int userId, 
                    int applyanswertoallgroup, 
                    string selectedimageid, 
                    bool issiteworkitem, 
                    string costbtp, 
                    string costdbc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateEstimateDetails", ReplyAction="http://tempuri.org/IRetailSystem/UpdateEstimateDetailsResponse")]
        System.Threading.Tasks.Task UpdateEstimateDetailsAsync(
                    int revisionDetailsId, 
                    decimal price, 
                    decimal quantity, 
                    decimal totalprice, 
                    string productDescription, 
                    string extraDescription, 
                    string internalDescription, 
                    string additionalnotes, 
                    string studioManswer, 
                    int itemaccepted, 
                    int categoryid, 
                    int groupid, 
                    int pricedisplayid, 
                    int userId, 
                    int applyanswertoallgroup, 
                    string selectedimageid, 
                    bool issiteworkitem, 
                    string costbtp, 
                    string costdbc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/DeleteProduct", ReplyAction="http://tempuri.org/IRetailSystem/DeleteProductResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails DeleteProduct(int revisionDetailsId, string reason, int reasonid, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/DeleteProduct", ReplyAction="http://tempuri.org/IRetailSystem/DeleteProductResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails> DeleteProductAsync(int revisionDetailsId, string reason, int reasonid, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/InsertComment", ReplyAction="http://tempuri.org/IRetailSystem/InsertCommentResponse")]
        void InsertComment(int revisionId, string comment, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/InsertComment", ReplyAction="http://tempuri.org/IRetailSystem/InsertCommentResponse")]
        System.Threading.Tasks.Task InsertCommentAsync(int revisionId, string comment, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateComment", ReplyAction="http://tempuri.org/IRetailSystem/UpdateCommentResponse")]
        void UpdateComment(int estimateRevisionId, string comment, int userid, int variationnumber, string variationsummary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateComment", ReplyAction="http://tempuri.org/IRetailSystem/UpdateCommentResponse")]
        System.Threading.Tasks.Task UpdateCommentAsync(int estimateRevisionId, string comment, int userid, int variationnumber, string variationsummary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateEstimateStatus", ReplyAction="http://tempuri.org/IRetailSystem/UpdateEstimateStatusResponse")]
        void UpdateEstimateStatus(int revisionId, int statusId, int statusReasonId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateEstimateStatus", ReplyAction="http://tempuri.org/IRetailSystem/UpdateEstimateStatusResponse")]
        System.Threading.Tasks.Task UpdateEstimateStatusAsync(int revisionId, int statusId, int statusReasonId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateEstimateDifficultyRating", ReplyAction="http://tempuri.org/IRetailSystem/UpdateEstimateDifficultyRatingResponse")]
        void UpdateEstimateDifficultyRating(int estimateRevisionId, int difficultyRatingId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateEstimateDifficultyRating", ReplyAction="http://tempuri.org/IRetailSystem/UpdateEstimateDifficultyRatingResponse")]
        System.Threading.Tasks.Task UpdateEstimateDifficultyRatingAsync(int estimateRevisionId, int difficultyRatingId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateQueueDifficultyRating", ReplyAction="http://tempuri.org/IRetailSystem/UpdateQueueDifficultyRatingResponse")]
        void UpdateQueueDifficultyRating(int queueId, int difficultyRatingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateQueueDifficultyRating", ReplyAction="http://tempuri.org/IRetailSystem/UpdateQueueDifficultyRatingResponse")]
        System.Threading.Tasks.Task UpdateQueueDifficultyRatingAsync(int queueId, int difficultyRatingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/MarginReport_SaveDetails", ReplyAction="http://tempuri.org/IRetailSystem/MarginReport_SaveDetailsResponse")]
        void MarginReport_SaveDetails(int estimateRevisionId, int titledLand, int titledLandDays, int basePriceExtensionDays, System.DateTime effectiveDate, double bpeCharge, int requiredBPEChargeType, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/MarginReport_SaveDetails", ReplyAction="http://tempuri.org/IRetailSystem/MarginReport_SaveDetailsResponse")]
        System.Threading.Tasks.Task MarginReport_SaveDetailsAsync(int estimateRevisionId, int titledLand, int titledLandDays, int basePriceExtensionDays, System.DateTime effectiveDate, double bpeCharge, int requiredBPEChargeType, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/MarginReport_GetDetails", ReplyAction="http://tempuri.org/IRetailSystem/MarginReport_GetDetailsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.MarginReportDetail MarginReport_GetDetails(int estimateRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/MarginReport_GetDetails", ReplyAction="http://tempuri.org/IRetailSystem/MarginReport_GetDetailsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.MarginReportDetail> MarginReport_GetDetailsAsync(int estimateRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateEstimateDueDate", ReplyAction="http://tempuri.org/IRetailSystem/UpdateEstimateDueDateResponse")]
        void UpdateEstimateDueDate(int estimateRevisionId, System.DateTime duedate, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateEstimateDueDate", ReplyAction="http://tempuri.org/IRetailSystem/UpdateEstimateDueDateResponse")]
        System.Threading.Tasks.Task UpdateEstimateDueDateAsync(int estimateRevisionId, System.DateTime duedate, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateEstimateAppointmentTime", ReplyAction="http://tempuri.org/IRetailSystem/UpdateEstimateAppointmentTimeResponse")]
        void UpdateEstimateAppointmentTime(int estimateRevisionId, System.DateTime appointmentTime, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateEstimateAppointmentTime", ReplyAction="http://tempuri.org/IRetailSystem/UpdateEstimateAppointmentTimeResponse")]
        System.Threading.Tasks.Task UpdateEstimateAppointmentTimeAsync(int estimateRevisionId, System.DateTime appointmentTime, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateQueueDueDate", ReplyAction="http://tempuri.org/IRetailSystem/UpdateQueueDueDateResponse")]
        void UpdateQueueDueDate(int queueId, System.DateTime duedate, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateQueueDueDate", ReplyAction="http://tempuri.org/IRetailSystem/UpdateQueueDueDateResponse")]
        System.Threading.Tasks.Task UpdateQueueDueDateAsync(int queueId, System.DateTime duedate, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateEstimateEffectiveDate", ReplyAction="http://tempuri.org/IRetailSystem/UpdateEstimateEffectiveDateResponse")]
        void UpdateEstimateEffectiveDate(int estimateRevisionId, int priceId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateEstimateEffectiveDate", ReplyAction="http://tempuri.org/IRetailSystem/UpdateEstimateEffectiveDateResponse")]
        System.Threading.Tasks.Task UpdateEstimateEffectiveDateAsync(int estimateRevisionId, int priceId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetUsersByRegionAndRole", ReplyAction="http://tempuri.org/IRetailSystem/GetUsersByRegionAndRoleResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.User[] GetUsersByRegionAndRole(int regionId, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetUsersByRegionAndRole", ReplyAction="http://tempuri.org/IRetailSystem/GetUsersByRegionAndRoleResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.User[]> GetUsersByRegionAndRoleAsync(int regionId, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetUsersByRegionAndRevisionType", ReplyAction="http://tempuri.org/IRetailSystem/GetUsersByRegionAndRevisionTypeResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.User[] GetUsersByRegionAndRevisionType(int regionId, int revisionTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetUsersByRegionAndRevisionType", ReplyAction="http://tempuri.org/IRetailSystem/GetUsersByRegionAndRevisionTypeResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.User[]> GetUsersByRegionAndRevisionTypeAsync(int regionId, int revisionTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetCurrentUser", ReplyAction="http://tempuri.org/IRetailSystem/GetCurrentUserResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.User GetCurrentUser(string loginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetCurrentUser", ReplyAction="http://tempuri.org/IRetailSystem/GetCurrentUserResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.User> GetCurrentUserAsync(string loginName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetUserRoles", ReplyAction="http://tempuri.org/IRetailSystem/GetUserRolesResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.UserRole[] GetUserRoles(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetUserRoles", ReplyAction="http://tempuri.org/IRetailSystem/GetUserRolesResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.UserRole[]> GetUserRolesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetEstimateStatuses", ReplyAction="http://tempuri.org/IRetailSystem/GetEstimateStatusesResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateStatus[] GetEstimateStatuses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetEstimateStatuses", ReplyAction="http://tempuri.org/IRetailSystem/GetEstimateStatusesResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateStatus[]> GetEstimateStatusesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetStatusReasons", ReplyAction="http://tempuri.org/IRetailSystem/GetStatusReasonsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.StatusReason[] GetStatusReasons(int statusId, int revisionTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetStatusReasons", ReplyAction="http://tempuri.org/IRetailSystem/GetStatusReasonsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.StatusReason[]> GetStatusReasonsAsync(int statusId, int revisionTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetDifficultyRatings", ReplyAction="http://tempuri.org/IRetailSystem/GetDifficultyRatingsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.DifficultyRating[] GetDifficultyRatings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetDifficultyRatings", ReplyAction="http://tempuri.org/IRetailSystem/GetDifficultyRatingsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.DifficultyRating[]> GetDifficultyRatingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetRevisionTypeAccess", ReplyAction="http://tempuri.org/IRetailSystem/GetRevisionTypeAccessResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.RevisionType[] GetRevisionTypeAccess(int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetRevisionTypeAccess", ReplyAction="http://tempuri.org/IRetailSystem/GetRevisionTypeAccessResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.RevisionType[]> GetRevisionTypeAccessAsync(int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetHomePrices", ReplyAction="http://tempuri.org/IRetailSystem/GetHomePricesResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.HomePrice[] GetHomePrices(int estimateRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetHomePrices", ReplyAction="http://tempuri.org/IRetailSystem/GetHomePricesResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.HomePrice[]> GetHomePricesAsync(int estimateRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAuditTrail", ReplyAction="http://tempuri.org/IRetailSystem/GetAuditTrailResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.AuditLog[] GetAuditTrail(int estimateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAuditTrail", ReplyAction="http://tempuri.org/IRetailSystem/GetAuditTrailResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.AuditLog[]> GetAuditTrailAsync(int estimateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CompareEstimateDetails", ReplyAction="http://tempuri.org/IRetailSystem/CompareEstimateDetailsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetailsComparison[] CompareEstimateDetails(int estimateRevisionIdA, int estimateRevisionIdB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CompareEstimateDetails", ReplyAction="http://tempuri.org/IRetailSystem/CompareEstimateDetailsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetailsComparison[]> CompareEstimateDetailsAsync(int estimateRevisionIdA, int estimateRevisionIdB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CompareEstimateHeader", ReplyAction="http://tempuri.org/IRetailSystem/CompareEstimateHeaderResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateHeaderComparison[] CompareEstimateHeader(int estimateRevisionIdA, int estimateRevisionIdB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CompareEstimateHeader", ReplyAction="http://tempuri.org/IRetailSystem/CompareEstimateHeaderResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateHeaderComparison[]> CompareEstimateHeaderAsync(int estimateRevisionIdA, int estimateRevisionIdB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetLatestEstimateRevisionId", ReplyAction="http://tempuri.org/IRetailSystem/GetLatestEstimateRevisionIdResponse")]
        int GetLatestEstimateRevisionId(int estimateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetLatestEstimateRevisionId", ReplyAction="http://tempuri.org/IRetailSystem/GetLatestEstimateRevisionIdResponse")]
        System.Threading.Tasks.Task<int> GetLatestEstimateRevisionIdAsync(int estimateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetResubmittedEstimateCount", ReplyAction="http://tempuri.org/IRetailSystem/GetResubmittedEstimateCountResponse")]
        int GetResubmittedEstimateCount(int userId, int regionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetResubmittedEstimateCount", ReplyAction="http://tempuri.org/IRetailSystem/GetResubmittedEstimateCountResponse")]
        System.Threading.Tasks.Task<int> GetResubmittedEstimateCountAsync(int userId, int regionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetOptionTreeFromMasterHome", ReplyAction="http://tempuri.org/IRetailSystem/GetOptionTreeFromMasterHomeResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[] GetOptionTreeFromMasterHome(string regionid, string homeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetOptionTreeFromMasterHome", ReplyAction="http://tempuri.org/IRetailSystem/GetOptionTreeFromMasterHomeResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[]> GetOptionTreeFromMasterHomeAsync(string regionid, string homeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CheckValidProductByRevision", ReplyAction="http://tempuri.org/IRetailSystem/CheckValidProductByRevisionResponse")]
        bool CheckValidProductByRevision(int revisionId, string productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CheckValidProductByRevision", ReplyAction="http://tempuri.org/IRetailSystem/CheckValidProductByRevisionResponse")]
        System.Threading.Tasks.Task<bool> CheckValidProductByRevisionAsync(int revisionId, string productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetOptionTreeAsOptionTreeProductsForEstimateItem" +
            "Replace", ReplyAction="http://tempuri.org/IRetailSystem/GetOptionTreeAsOptionTreeProductsForEstimateItem" +
            "ReplaceResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[] GetOptionTreeAsOptionTreeProductsForEstimateItemReplace(string revisionId, string areaName, string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetOptionTreeAsOptionTreeProductsForEstimateItem" +
            "Replace", ReplyAction="http://tempuri.org/IRetailSystem/GetOptionTreeAsOptionTreeProductsForEstimateItem" +
            "ReplaceResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[]> GetOptionTreeAsOptionTreeProductsForEstimateItemReplaceAsync(string revisionId, string areaName, string groupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetOptionTreeAsOptionTreeProducts", ReplyAction="http://tempuri.org/IRetailSystem/GetOptionTreeAsOptionTreeProductsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[] GetOptionTreeAsOptionTreeProducts(string revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetOptionTreeAsOptionTreeProducts", ReplyAction="http://tempuri.org/IRetailSystem/GetOptionTreeAsOptionTreeProductsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[]> GetOptionTreeAsOptionTreeProductsAsync(string revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetOptionTreeFromAllProducts", ReplyAction="http://tempuri.org/IRetailSystem/GetOptionTreeFromAllProductsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[] GetOptionTreeFromAllProducts(string regionid, string searchText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetOptionTreeFromAllProducts", ReplyAction="http://tempuri.org/IRetailSystem/GetOptionTreeFromAllProductsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[]> GetOptionTreeFromAllProductsAsync(string regionid, string searchText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetOptionTreeFromAllProductsExtended", ReplyAction="http://tempuri.org/IRetailSystem/GetOptionTreeFromAllProductsExtendedResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[] GetOptionTreeFromAllProductsExtended(int stateid, string regionid, int homeid, string productname, string productdesc, int areaid, int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetOptionTreeFromAllProductsExtended", ReplyAction="http://tempuri.org/IRetailSystem/GetOptionTreeFromAllProductsExtendedResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[]> GetOptionTreeFromAllProductsExtendedAsync(int stateid, string regionid, int homeid, string productname, string productdesc, int areaid, int groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetSelectedPAG", ReplyAction="http://tempuri.org/IRetailSystem/GetSelectedPAGResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.PAG[] GetSelectedPAG(string estimateid, string revisionnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetSelectedPAG", ReplyAction="http://tempuri.org/IRetailSystem/GetSelectedPAGResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.PAG[]> GetSelectedPAGAsync(string estimateid, string revisionnumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetCommentsForAnEstimate", ReplyAction="http://tempuri.org/IRetailSystem/GetCommentsForAnEstimateResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateComments[] GetCommentsForAnEstimate(string revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetCommentsForAnEstimate", ReplyAction="http://tempuri.org/IRetailSystem/GetCommentsForAnEstimateResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateComments[]> GetCommentsForAnEstimateAsync(string revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAccessPermission", ReplyAction="http://tempuri.org/IRetailSystem/GetAccessPermissionResponse")]
        bool GetAccessPermission(string revisionid, string userid, string roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAccessPermission", ReplyAction="http://tempuri.org/IRetailSystem/GetAccessPermissionResponse")]
        System.Threading.Tasks.Task<bool> GetAccessPermissionAsync(string revisionid, string userid, string roleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetEstimateCount", ReplyAction="http://tempuri.org/IRetailSystem/GetEstimateCountResponse")]
        int[] GetEstimateCount(int userId, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetEstimateCount", ReplyAction="http://tempuri.org/IRetailSystem/GetEstimateCountResponse")]
        System.Threading.Tasks.Task<int[]> GetEstimateCountAsync(int userId, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SaveSelectedItem", ReplyAction="http://tempuri.org/IRetailSystem/SaveSelectedItemResponse")]
        int SaveSelectedItem(int selectedid, int revisionid, int pagid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SaveSelectedItem", ReplyAction="http://tempuri.org/IRetailSystem/SaveSelectedItemResponse")]
        System.Threading.Tasks.Task<int> SaveSelectedItemAsync(int selectedid, int revisionid, int pagid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SaveEditItemDetails", ReplyAction="http://tempuri.org/IRetailSystem/SaveEditItemDetailsResponse")]
        bool SaveEditItemDetails(int selectedid, int revisionid, decimal qty, decimal sellprice, string productdescription, string extradescription, string internaldescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SaveEditItemDetails", ReplyAction="http://tempuri.org/IRetailSystem/SaveEditItemDetailsResponse")]
        System.Threading.Tasks.Task<bool> SaveEditItemDetailsAsync(int selectedid, int revisionid, decimal qty, decimal sellprice, string productdescription, string extradescription, string internaldescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/RemoveItem", ReplyAction="http://tempuri.org/IRetailSystem/RemoveItemResponse")]
        bool RemoveItem(int selectedid, int estimateid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/RemoveItem", ReplyAction="http://tempuri.org/IRetailSystem/RemoveItemResponse")]
        System.Threading.Tasks.Task<bool> RemoveItemAsync(int selectedid, int estimateid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CopyItemFromOptionTreeToEstimate", ReplyAction="http://tempuri.org/IRetailSystem/CopyItemFromOptionTreeToEstimateResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails CopyItemFromOptionTreeToEstimate(int estimatedetailsid, int revisiondetailsid, int revisionid, int productareagroupid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CopyItemFromOptionTreeToEstimate", ReplyAction="http://tempuri.org/IRetailSystem/CopyItemFromOptionTreeToEstimateResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails> CopyItemFromOptionTreeToEstimateAsync(int estimatedetailsid, int revisiondetailsid, int revisionid, int productareagroupid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CopyItemFromMasterHomeToEstimate", ReplyAction="http://tempuri.org/IRetailSystem/CopyItemFromMasterHomeToEstimateResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails CopyItemFromMasterHomeToEstimate(int regionid, int optionid, int revisionid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CopyItemFromMasterHomeToEstimate", ReplyAction="http://tempuri.org/IRetailSystem/CopyItemFromMasterHomeToEstimateResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails> CopyItemFromMasterHomeToEstimateAsync(int regionid, int optionid, int revisionid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CopyItemFromAllProductsToEstimate", ReplyAction="http://tempuri.org/IRetailSystem/CopyItemFromAllProductsToEstimateResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails CopyItemFromAllProductsToEstimate(int regionid, string productid, int revisionid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CopyItemFromAllProductsToEstimate", ReplyAction="http://tempuri.org/IRetailSystem/CopyItemFromAllProductsToEstimateResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails> CopyItemFromAllProductsToEstimateAsync(int regionid, string productid, int revisionid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SynchronizeNewOptionToEstimate", ReplyAction="http://tempuri.org/IRetailSystem/SynchronizeNewOptionToEstimateResponse")]
        bool SynchronizeNewOptionToEstimate(int revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SynchronizeNewOptionToEstimate", ReplyAction="http://tempuri.org/IRetailSystem/SynchronizeNewOptionToEstimateResponse")]
        System.Threading.Tasks.Task<bool> SynchronizeNewOptionToEstimateAsync(int revisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAdditionalNotesTemplateAndProducts", ReplyAction="http://tempuri.org/IRetailSystem/GetAdditionalNotesTemplateAndProductsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] GetAdditionalNotesTemplateAndProducts(int revisionid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAdditionalNotesTemplateAndProducts", ReplyAction="http://tempuri.org/IRetailSystem/GetAdditionalNotesTemplateAndProductsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[]> GetAdditionalNotesTemplateAndProductsAsync(int revisionid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAdditionalNotesTemplateAndProductsByRegion", ReplyAction="http://tempuri.org/IRetailSystem/GetAdditionalNotesTemplateAndProductsByRegionRes" +
            "ponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] GetAdditionalNotesTemplateAndProductsByRegion(string templatename, string subregionid, int userid, int active, int selectedroleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAdditionalNotesTemplateAndProductsByRegion", ReplyAction="http://tempuri.org/IRetailSystem/GetAdditionalNotesTemplateAndProductsByRegionRes" +
            "ponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[]> GetAdditionalNotesTemplateAndProductsByRegionAsync(string templatename, string subregionid, int userid, int active, int selectedroleid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateNoteTemplate", ReplyAction="http://tempuri.org/IRetailSystem/UpdateNoteTemplateResponse")]
        bool UpdateNoteTemplate(int templateid, string templatename, int status, int userid, string action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateNoteTemplate", ReplyAction="http://tempuri.org/IRetailSystem/UpdateNoteTemplateResponse")]
        System.Threading.Tasks.Task<bool> UpdateNoteTemplateAsync(int templateid, string templatename, int status, int userid, string action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CheckNewNoteTemplateNameExists", ReplyAction="http://tempuri.org/IRetailSystem/CheckNewNoteTemplateNameExistsResponse")]
        string CheckNewNoteTemplateNameExists(int templateid, string templatename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CheckNewNoteTemplateNameExists", ReplyAction="http://tempuri.org/IRetailSystem/CheckNewNoteTemplateNameExistsResponse")]
        System.Threading.Tasks.Task<string> CheckNewNoteTemplateNameExistsAsync(int templateid, string templatename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/AddAdditonalNotesTemplate", ReplyAction="http://tempuri.org/IRetailSystem/AddAdditonalNotesTemplateResponse")]
        bool AddAdditonalNotesTemplate(string templatename, int revisionid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/AddAdditonalNotesTemplate", ReplyAction="http://tempuri.org/IRetailSystem/AddAdditonalNotesTemplateResponse")]
        System.Threading.Tasks.Task<bool> AddAdditonalNotesTemplateAsync(string templatename, int revisionid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetSQSConfiguration", ReplyAction="http://tempuri.org/IRetailSystem/GetSQSConfigurationResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.SQSConfiguration[] GetSQSConfiguration(string configCode, string codeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetSQSConfiguration", ReplyAction="http://tempuri.org/IRetailSystem/GetSQSConfigurationResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SQSConfiguration[]> GetSQSConfigurationAsync(string configCode, string codeValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetSalesRegionByState", ReplyAction="http://tempuri.org/IRetailSystem/GetSalesRegionByStateResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.SQSSalesRegion[] GetSalesRegionByState(string stateid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetSalesRegionByState", ReplyAction="http://tempuri.org/IRetailSystem/GetSalesRegionByStateResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SQSSalesRegion[]> GetSalesRegionByStateAsync(string stateid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetPriceRegionByState", ReplyAction="http://tempuri.org/IRetailSystem/GetPriceRegionByStateResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.SQSSalesRegion[] GetPriceRegionByState(string stateid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetPriceRegionByState", ReplyAction="http://tempuri.org/IRetailSystem/GetPriceRegionByStateResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SQSSalesRegion[]> GetPriceRegionByStateAsync(string stateid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CreateSalesEstimateLog", ReplyAction="http://tempuri.org/IRetailSystem/CreateSalesEstimateLogResponse")]
        bool CreateSalesEstimateLog(string username, Metricon.WCF.MetriconRetailSystem.Contracts.MRSLogAction action, int estimateRevisionId, string extraDescription, int reasonCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CreateSalesEstimateLog", ReplyAction="http://tempuri.org/IRetailSystem/CreateSalesEstimateLogResponse")]
        System.Threading.Tasks.Task<bool> CreateSalesEstimateLogAsync(string username, Metricon.WCF.MetriconRetailSystem.Contracts.MRSLogAction action, int estimateRevisionId, string extraDescription, int reasonCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SetContractStatus", ReplyAction="http://tempuri.org/IRetailSystem/SetContractStatusResponse")]
        bool SetContractStatus(string username, int estimateRevisionId, Metricon.WCF.MetriconRetailSystem.Contracts.ContractStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SetContractStatus", ReplyAction="http://tempuri.org/IRetailSystem/SetContractStatusResponse")]
        System.Threading.Tasks.Task<bool> SetContractStatusAsync(string username, int estimateRevisionId, Metricon.WCF.MetriconRetailSystem.Contracts.ContractStatus status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/RemoveItemFromNotesTemplate", ReplyAction="http://tempuri.org/IRetailSystem/RemoveItemFromNotesTemplateResponse")]
        bool RemoveItemFromNotesTemplate(string templateid, string productareagroupid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/RemoveItemFromNotesTemplate", ReplyAction="http://tempuri.org/IRetailSystem/RemoveItemFromNotesTemplateResponse")]
        System.Threading.Tasks.Task<bool> RemoveItemFromNotesTemplateAsync(string templateid, string productareagroupid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAvailableItemsForNotesTemplate", ReplyAction="http://tempuri.org/IRetailSystem/GetAvailableItemsForNotesTemplateResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] GetAvailableItemsForNotesTemplate(string templateid, string searchtext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetAvailableItemsForNotesTemplate", ReplyAction="http://tempuri.org/IRetailSystem/GetAvailableItemsForNotesTemplateResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[]> GetAvailableItemsForNotesTemplateAsync(string templateid, string searchtext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/AddItemToNotesTemplate", ReplyAction="http://tempuri.org/IRetailSystem/AddItemToNotesTemplateResponse")]
        bool AddItemToNotesTemplate(string templateid, string selecteditemids, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/AddItemToNotesTemplate", ReplyAction="http://tempuri.org/IRetailSystem/AddItemToNotesTemplateResponse")]
        System.Threading.Tasks.Task<bool> AddItemToNotesTemplateAsync(string templateid, string selecteditemids, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/AddNewNotesTemplate", ReplyAction="http://tempuri.org/IRetailSystem/AddNewNotesTemplateResponse")]
        bool AddNewNotesTemplate(string templatename, string regionid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/AddNewNotesTemplate", ReplyAction="http://tempuri.org/IRetailSystem/AddNewNotesTemplateResponse")]
        System.Threading.Tasks.Task<bool> AddNewNotesTemplateAsync(string templatename, string regionid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/RemoveNotesTemplate", ReplyAction="http://tempuri.org/IRetailSystem/RemoveNotesTemplateResponse")]
        bool RemoveNotesTemplate(string templateid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/RemoveNotesTemplate", ReplyAction="http://tempuri.org/IRetailSystem/RemoveNotesTemplateResponse")]
        System.Threading.Tasks.Task<bool> RemoveNotesTemplateAsync(string templateid, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CopyNotesTemplate", ReplyAction="http://tempuri.org/IRetailSystem/CopyNotesTemplateResponse")]
        bool CopyNotesTemplate(string templatename, string regionid, int userid, string templateid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CopyNotesTemplate", ReplyAction="http://tempuri.org/IRetailSystem/CopyNotesTemplateResponse")]
        System.Threading.Tasks.Task<bool> CopyNotesTemplateAsync(string templatename, string regionid, int userid, string templateid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CreateTaskForContract", ReplyAction="http://tempuri.org/IRetailSystem/CreateTaskForContractResponse")]
        bool CreateTaskForContract(string contractid, int revisionid, string subject, System.DateTime duedate, string category, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CreateTaskForContract", ReplyAction="http://tempuri.org/IRetailSystem/CreateTaskForContractResponse")]
        System.Threading.Tasks.Task<bool> CreateTaskForContractAsync(string contractid, int revisionid, string subject, System.DateTime duedate, string category, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateNotesTemplateItem", ReplyAction="http://tempuri.org/IRetailSystem/UpdateNotesTemplateItemResponse")]
        bool UpdateNotesTemplateItem(string templateid, string productareagroupid, decimal quanitity, decimal price, string extradescription, string internaldescription, string additionalinfo, int userid, bool usedefaultquantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateNotesTemplateItem", ReplyAction="http://tempuri.org/IRetailSystem/UpdateNotesTemplateItemResponse")]
        System.Threading.Tasks.Task<bool> UpdateNotesTemplateItemAsync(string templateid, string productareagroupid, decimal quanitity, decimal price, string extradescription, string internaldescription, string additionalinfo, int userid, bool usedefaultquantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SynchroniseCustomerDetails", ReplyAction="http://tempuri.org/IRetailSystem/SynchroniseCustomerDetailsResponse")]
        string SynchroniseCustomerDetails(string contractNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/SynchroniseCustomerDetails", ReplyAction="http://tempuri.org/IRetailSystem/SynchroniseCustomerDetailsResponse")]
        System.Threading.Tasks.Task<string> SynchroniseCustomerDetailsAsync(string contractNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetNonstandardCategory", ReplyAction="http://tempuri.org/IRetailSystem/GetNonstandardCategoryResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.NonStandardCategory[] GetNonstandardCategory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetNonstandardCategory", ReplyAction="http://tempuri.org/IRetailSystem/GetNonstandardCategoryResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.NonStandardCategory[]> GetNonstandardCategoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetNonstandardCategoryByState", ReplyAction="http://tempuri.org/IRetailSystem/GetNonstandardCategoryByStateResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.NonStandardCategory[] GetNonstandardCategoryByState(int stateid, int selectedareaid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetNonstandardCategoryByState", ReplyAction="http://tempuri.org/IRetailSystem/GetNonstandardCategoryByStateResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.NonStandardCategory[]> GetNonstandardCategoryByStateAsync(int stateid, int selectedareaid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetNonstandardGroups", ReplyAction="http://tempuri.org/IRetailSystem/GetNonstandardGroupsResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.NonStandardGroup[] GetNonstandardGroups(int selectedareaid, int stateid, int selectedgroupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetNonstandardGroups", ReplyAction="http://tempuri.org/IRetailSystem/GetNonstandardGroupsResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.NonStandardGroup[]> GetNonstandardGroupsAsync(int selectedareaid, int stateid, int selectedgroupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetPriceDisplayCodes", ReplyAction="http://tempuri.org/IRetailSystem/GetPriceDisplayCodesResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.PriceDisplayCode[] GetPriceDisplayCodes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetPriceDisplayCodes", ReplyAction="http://tempuri.org/IRetailSystem/GetPriceDisplayCodesResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.PriceDisplayCode[]> GetPriceDisplayCodesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetProductImages", ReplyAction="http://tempuri.org/IRetailSystem/GetProductImagesResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.ProductImage[] GetProductImages(string productid, int supplierid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/GetProductImages", ReplyAction="http://tempuri.org/IRetailSystem/GetProductImagesResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ProductImage[]> GetProductImagesAsync(string productid, int supplierid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CheckEstimateLockStatus", ReplyAction="http://tempuri.org/IRetailSystem/CheckEstimateLockStatusResponse")]
        string CheckEstimateLockStatus(int estimaterevisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/CheckEstimateLockStatus", ReplyAction="http://tempuri.org/IRetailSystem/CheckEstimateLockStatusResponse")]
        System.Threading.Tasks.Task<string> CheckEstimateLockStatusAsync(int estimaterevisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UnlockEstimate", ReplyAction="http://tempuri.org/IRetailSystem/UnlockEstimateResponse")]
        void UnlockEstimate(int estimaterevisionid, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UnlockEstimate", ReplyAction="http://tempuri.org/IRetailSystem/UnlockEstimateResponse")]
        System.Threading.Tasks.Task UnlockEstimateAsync(int estimaterevisionid, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ValidateStudioMEstimate", ReplyAction="http://tempuri.org/IRetailSystem/ValidateStudioMEstimateResponse")]
        Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[] ValidateStudioMEstimate(int estimaterevisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/ValidateStudioMEstimate", ReplyAction="http://tempuri.org/IRetailSystem/ValidateStudioMEstimateResponse")]
        System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[]> ValidateStudioMEstimateAsync(int estimaterevisionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateItemAcceptance", ReplyAction="http://tempuri.org/IRetailSystem/UpdateItemAcceptanceResponse")]
        bool UpdateItemAcceptance(string revisionestimatedetailsid, int accepted, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetailSystem/UpdateItemAcceptance", ReplyAction="http://tempuri.org/IRetailSystem/UpdateItemAcceptanceResponse")]
        System.Threading.Tasks.Task<bool> UpdateItemAcceptanceAsync(string revisionestimatedetailsid, int accepted, int userid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRetailSystemChannel : Metricon.WCF.MRS.Caching.Services.ServiceReference1.IRetailSystem, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetailSystemClient : System.ServiceModel.ClientBase<Metricon.WCF.MRS.Caching.Services.ServiceReference1.IRetailSystem>, Metricon.WCF.MRS.Caching.Services.ServiceReference1.IRetailSystem {
        
        public RetailSystemClient() {
        }
        
        public RetailSystemClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RetailSystemClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RetailSystemClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RetailSystemClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.ContractDraftActionAvailability GetContractDraftActionAvailability(int estimateRevisionId) {
            return base.Channel.GetContractDraftActionAvailability(estimateRevisionId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ContractDraftActionAvailability> GetContractDraftActionAvailabilityAsync(int estimateRevisionId) {
            return base.Channel.GetContractDraftActionAvailabilityAsync(estimateRevisionId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.FinalContractActionAvailability GetFinalContractActionAvailability(int estimateRevisionId, string contractNumber) {
            return base.Channel.GetFinalContractActionAvailability(estimateRevisionId, contractNumber);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.FinalContractActionAvailability> GetFinalContractActionAvailabilityAsync(int estimateRevisionId, string contractNumber) {
            return base.Channel.GetFinalContractActionAvailabilityAsync(estimateRevisionId, contractNumber);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.CustomerSupportActionAvailability GetCustomerSupportActionAvailability(int estimateRevisionId, string contractNumber) {
            return base.Channel.GetCustomerSupportActionAvailability(estimateRevisionId, contractNumber);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.CustomerSupportActionAvailability> GetCustomerSupportActionAvailabilityAsync(int estimateRevisionId, string contractNumber) {
            return base.Channel.GetCustomerSupportActionAvailabilityAsync(estimateRevisionId, contractNumber);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.SalesEstimatorActionAvailability GetSalesEstimatorActionAvailability(int estimateRevisionId, int userid) {
            return base.Channel.GetSalesEstimatorActionAvailability(estimateRevisionId, userid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SalesEstimatorActionAvailability> GetSalesEstimatorActionAvailabilityAsync(int estimateRevisionId, int userid) {
            return base.Channel.GetSalesEstimatorActionAvailabilityAsync(estimateRevisionId, userid);
        }
        
        public bool GetContractDraftCreationVisibility(int estimateRevisionId) {
            return base.Channel.GetContractDraftCreationVisibility(estimateRevisionId);
        }
        
        public System.Threading.Tasks.Task<bool> GetContractDraftCreationVisibilityAsync(int estimateRevisionId) {
            return base.Channel.GetContractDraftCreationVisibilityAsync(estimateRevisionId);
        }
        
        public bool GetFinalContractCreationVisibility(int estimateRevisionId) {
            return base.Channel.GetFinalContractCreationVisibility(estimateRevisionId);
        }
        
        public System.Threading.Tasks.Task<bool> GetFinalContractCreationVisibilityAsync(int estimateRevisionId) {
            return base.Channel.GetFinalContractCreationVisibilityAsync(estimateRevisionId);
        }
        
        public void GetEstimateRevisionStatus(Metricon.WCF.MetriconRetailSystem.Contracts.EstimateRevisionStatus status) {
            base.Channel.GetEstimateRevisionStatus(status);
        }
        
        public System.Threading.Tasks.Task GetEstimateRevisionStatusAsync(Metricon.WCF.MetriconRetailSystem.Contracts.EstimateRevisionStatus status) {
            return base.Channel.GetEstimateRevisionStatusAsync(status);
        }
        
        public void CreateSplitStudioMRevisions(int estimateRevisionId, string revisionTypeIds, string assignedToUserIds, int createdbyId) {
            base.Channel.CreateSplitStudioMRevisions(estimateRevisionId, revisionTypeIds, assignedToUserIds, createdbyId);
        }
        
        public System.Threading.Tasks.Task CreateSplitStudioMRevisionsAsync(int estimateRevisionId, string revisionTypeIds, string assignedToUserIds, int createdbyId) {
            return base.Channel.CreateSplitStudioMRevisionsAsync(estimateRevisionId, revisionTypeIds, assignedToUserIds, createdbyId);
        }
        
        public void MergeStudioMRevisions(int estimateRevisionId, int createdbyId) {
            base.Channel.MergeStudioMRevisions(estimateRevisionId, createdbyId);
        }
        
        public System.Threading.Tasks.Task MergeStudioMRevisionsAsync(int estimateRevisionId, int createdbyId) {
            return base.Channel.MergeStudioMRevisionsAsync(estimateRevisionId, createdbyId);
        }
        
        public void CreateContractDraft(int estimateRevisionId, int createdbyId) {
            base.Channel.CreateContractDraft(estimateRevisionId, createdbyId);
        }
        
        public System.Threading.Tasks.Task CreateContractDraftAsync(int estimateRevisionId, int createdbyId) {
            return base.Channel.CreateContractDraftAsync(estimateRevisionId, createdbyId);
        }
        
        public void CreateFinalContract(int estimateRevisionId, int createdbyId) {
            base.Channel.CreateFinalContract(estimateRevisionId, createdbyId);
        }
        
        public System.Threading.Tasks.Task CreateFinalContractAsync(int estimateRevisionId, int createdbyId) {
            return base.Channel.CreateFinalContractAsync(estimateRevisionId, createdbyId);
        }
        
        public void CreateCscVariation(int estimateRevisionId, int createdbyId) {
            base.Channel.CreateCscVariation(estimateRevisionId, createdbyId);
        }
        
        public System.Threading.Tasks.Task CreateCscVariationAsync(int estimateRevisionId, int createdbyId) {
            return base.Channel.CreateCscVariationAsync(estimateRevisionId, createdbyId);
        }
        
        public string CreateStudioMRevision(int estimateRevisionId, int ownerId, System.DateTime appointmentDateTime, int revisionTypeId, int createdbyId) {
            return base.Channel.CreateStudioMRevision(estimateRevisionId, ownerId, appointmentDateTime, revisionTypeId, createdbyId);
        }
        
        public System.Threading.Tasks.Task<string> CreateStudioMRevisionAsync(int estimateRevisionId, int ownerId, System.DateTime appointmentDateTime, int revisionTypeId, int createdbyId) {
            return base.Channel.CreateStudioMRevisionAsync(estimateRevisionId, ownerId, appointmentDateTime, revisionTypeId, createdbyId);
        }
        
        public string ValidateSetEstimateStatus(int estimateRevisionId, int nextRevisionTypeId) {
            return base.Channel.ValidateSetEstimateStatus(estimateRevisionId, nextRevisionTypeId);
        }
        
        public System.Threading.Tasks.Task<string> ValidateSetEstimateStatusAsync(int estimateRevisionId, int nextRevisionTypeId) {
            return base.Channel.ValidateSetEstimateStatusAsync(estimateRevisionId, nextRevisionTypeId);
        }
        
        public string GetCustomerDocumentType(int estimateRevisionId) {
            return base.Channel.GetCustomerDocumentType(estimateRevisionId);
        }
        
        public System.Threading.Tasks.Task<string> GetCustomerDocumentTypeAsync(int estimateRevisionId) {
            return base.Channel.GetCustomerDocumentTypeAsync(estimateRevisionId);
        }
        
        public int UpdateCustomerDocumentDetails(Metricon.WCF.MetriconRetailSystem.Contracts.CustomerDocumentDetails document) {
            return base.Channel.UpdateCustomerDocumentDetails(document);
        }
        
        public System.Threading.Tasks.Task<int> UpdateCustomerDocumentDetailsAsync(Metricon.WCF.MetriconRetailSystem.Contracts.CustomerDocumentDetails document) {
            return base.Channel.UpdateCustomerDocumentDetailsAsync(document);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.CustomerDocumentDetails GetCustomerDocumentDetails(int estimateRevisionId) {
            return base.Channel.GetCustomerDocumentDetails(estimateRevisionId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.CustomerDocumentDetails> GetCustomerDocumentDetailsAsync(int estimateRevisionId) {
            return base.Channel.GetCustomerDocumentDetailsAsync(estimateRevisionId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.SimplePAG[] GetRelevantPAGFromOnePAG(string estimatedetailsid, string revisionid) {
            return base.Channel.GetRelevantPAGFromOnePAG(estimatedetailsid, revisionid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SimplePAG[]> GetRelevantPAGFromOnePAGAsync(string estimatedetailsid, string revisionid) {
            return base.Channel.GetRelevantPAGFromOnePAGAsync(estimatedetailsid, revisionid);
        }
        
        public void CreateVariation(int estimateRevisionId, int revisionTypeId, int userId) {
            base.Channel.CreateVariation(estimateRevisionId, revisionTypeId, userId);
        }
        
        public System.Threading.Tasks.Task CreateVariationAsync(int estimateRevisionId, int revisionTypeId, int userId) {
            return base.Channel.CreateVariationAsync(estimateRevisionId, revisionTypeId, userId);
        }
        
        public void RejectVariation(int estimateRevisionId, int userId) {
            base.Channel.RejectVariation(estimateRevisionId, userId);
        }
        
        public System.Threading.Tasks.Task RejectVariationAsync(int estimateRevisionId, int userId) {
            return base.Channel.RejectVariationAsync(estimateRevisionId, userId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] SaveSelectedItemsFromOptionTreeToEstimate(
                    string optionidstring, 
                    string standardinclusionidstring, 
                    string revisionid, 
                    string studiomanswer, 
                    string userid, 
                    string action, 
                    string derivedcost, 
                    string costbtpexcgststring, 
                    string costbtpoverwriteflagstring, 
                    string costdbcexcgststring, 
                    string costdbcoverwriteflagstring, 
                    string quantitystring, 
                    string pricestring, 
                    string isacceptedstring, 
                    string areaidstring, 
                    string groupidstring, 
                    string pricedisplaycodestring, 
                    string issiteworkstring, 
                    string productdescriptionstring, 
                    string additionalnotestring, 
                    string extradescriptionstring, 
                    string internaldescriptionstring) {
            return base.Channel.SaveSelectedItemsFromOptionTreeToEstimate(optionidstring, standardinclusionidstring, revisionid, studiomanswer, userid, action, derivedcost, costbtpexcgststring, costbtpoverwriteflagstring, costdbcexcgststring, costdbcoverwriteflagstring, quantitystring, pricestring, isacceptedstring, areaidstring, groupidstring, pricedisplaycodestring, issiteworkstring, productdescriptionstring, additionalnotestring, extradescriptionstring, internaldescriptionstring);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[]> SaveSelectedItemsFromOptionTreeToEstimateAsync(
                    string optionidstring, 
                    string standardinclusionidstring, 
                    string revisionid, 
                    string studiomanswer, 
                    string userid, 
                    string action, 
                    string derivedcost, 
                    string costbtpexcgststring, 
                    string costbtpoverwriteflagstring, 
                    string costdbcexcgststring, 
                    string costdbcoverwriteflagstring, 
                    string quantitystring, 
                    string pricestring, 
                    string isacceptedstring, 
                    string areaidstring, 
                    string groupidstring, 
                    string pricedisplaycodestring, 
                    string issiteworkstring, 
                    string productdescriptionstring, 
                    string additionalnotestring, 
                    string extradescriptionstring, 
                    string internaldescriptionstring) {
            return base.Channel.SaveSelectedItemsFromOptionTreeToEstimateAsync(optionidstring, standardinclusionidstring, revisionid, studiomanswer, userid, action, derivedcost, costbtpexcgststring, costbtpoverwriteflagstring, costdbcexcgststring, costdbcoverwriteflagstring, quantitystring, pricestring, isacceptedstring, areaidstring, groupidstring, pricedisplaycodestring, issiteworkstring, productdescriptionstring, additionalnotestring, extradescriptionstring, internaldescriptionstring);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] ReplaceSaveSelectedItemsFromOptionTreeToEstimate(
                    string sourceEstimateRevisionDetailsId, 
                    string optionidstring, 
                    string standardinclusionidstring, 
                    string revisionid, 
                    string studiomanswer, 
                    string userid, 
                    string action, 
                    string derivedcost, 
                    string costbtpexcgst, 
                    string costdbcexcgst, 
                    string quantitystring, 
                    string pricestring, 
                    string isacceptedstring, 
                    string areaidstring, 
                    string groupidstring, 
                    string pricedisplaycodestring, 
                    string issiteworkstring, 
                    string productdescriptionstring, 
                    string additionalnotestring, 
                    string extradescriptionstring, 
                    string internaldescriptionstring, 
                    string copyquantity, 
                    string copyadditionalnotes, 
                    string copyextradescription, 
                    string copyinternalnotes) {
            return base.Channel.ReplaceSaveSelectedItemsFromOptionTreeToEstimate(sourceEstimateRevisionDetailsId, optionidstring, standardinclusionidstring, revisionid, studiomanswer, userid, action, derivedcost, costbtpexcgst, costdbcexcgst, quantitystring, pricestring, isacceptedstring, areaidstring, groupidstring, pricedisplaycodestring, issiteworkstring, productdescriptionstring, additionalnotestring, extradescriptionstring, internaldescriptionstring, copyquantity, copyadditionalnotes, copyextradescription, copyinternalnotes);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[]> ReplaceSaveSelectedItemsFromOptionTreeToEstimateAsync(
                    string sourceEstimateRevisionDetailsId, 
                    string optionidstring, 
                    string standardinclusionidstring, 
                    string revisionid, 
                    string studiomanswer, 
                    string userid, 
                    string action, 
                    string derivedcost, 
                    string costbtpexcgst, 
                    string costdbcexcgst, 
                    string quantitystring, 
                    string pricestring, 
                    string isacceptedstring, 
                    string areaidstring, 
                    string groupidstring, 
                    string pricedisplaycodestring, 
                    string issiteworkstring, 
                    string productdescriptionstring, 
                    string additionalnotestring, 
                    string extradescriptionstring, 
                    string internaldescriptionstring, 
                    string copyquantity, 
                    string copyadditionalnotes, 
                    string copyextradescription, 
                    string copyinternalnotes) {
            return base.Channel.ReplaceSaveSelectedItemsFromOptionTreeToEstimateAsync(sourceEstimateRevisionDetailsId, optionidstring, standardinclusionidstring, revisionid, studiomanswer, userid, action, derivedcost, costbtpexcgst, costdbcexcgst, quantitystring, pricestring, isacceptedstring, areaidstring, groupidstring, pricedisplaycodestring, issiteworkstring, productdescriptionstring, additionalnotestring, extradescriptionstring, internaldescriptionstring, copyquantity, copyadditionalnotes, copyextradescription, copyinternalnotes);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.RevisionTypePermission CheckRevisionTypeAllowToAddNSR(int revisontypeid) {
            return base.Channel.CheckRevisionTypeAllowToAddNSR(revisontypeid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.RevisionTypePermission> CheckRevisionTypeAllowToAddNSRAsync(int revisontypeid) {
            return base.Channel.CheckRevisionTypeAllowToAddNSRAsync(revisontypeid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[] ValidateAcceptFlagForRevision(int estimaterevisionid, int userroleid) {
            return base.Channel.ValidateAcceptFlagForRevision(estimaterevisionid, userroleid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[]> ValidateAcceptFlagForRevisionAsync(int estimaterevisionid, int userroleid) {
            return base.Channel.ValidateAcceptFlagForRevisionAsync(estimaterevisionid, userroleid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[] ValidateStudioMRevisions(int estimaterevisionid) {
            return base.Channel.ValidateStudioMRevisions(estimaterevisionid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[]> ValidateStudioMRevisionsAsync(int estimaterevisionid) {
            return base.Channel.ValidateStudioMRevisionsAsync(estimaterevisionid);
        }
        
        public bool ValidateAppointmentDate(int estimaterevisionid) {
            return base.Channel.ValidateAppointmentDate(estimaterevisionid);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateAppointmentDateAsync(int estimaterevisionid) {
            return base.Channel.ValidateAppointmentDateAsync(estimaterevisionid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.NextRevision[] GetNextEstimateRevision(int estimateRevisionId, int statusId) {
            return base.Channel.GetNextEstimateRevision(estimateRevisionId, statusId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.NextRevision[]> GetNextEstimateRevisionAsync(int estimateRevisionId, int statusId) {
            return base.Channel.GetNextEstimateRevisionAsync(estimateRevisionId, statusId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.AuditLog[] GetAuditLogs(int revisionid, int revisiondetailid) {
            return base.Channel.GetAuditLogs(revisionid, revisiondetailid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.AuditLog[]> GetAuditLogsAsync(int revisionid, int revisiondetailid) {
            return base.Channel.GetAuditLogsAsync(revisionid, revisiondetailid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.DeletedItem[] GetDeletedItems(int revisionid, Metricon.WCF.MetriconRetailSystem.Contracts.RESULT_TYPE resulttype) {
            return base.Channel.GetDeletedItems(revisionid, resulttype);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.DeletedItem[]> GetDeletedItemsAsync(int revisionid, Metricon.WCF.MetriconRetailSystem.Contracts.RESULT_TYPE resulttype) {
            return base.Channel.GetDeletedItemsAsync(revisionid, resulttype);
        }
        
        public bool ReAddDeletedEstimateItem(int sourceEstimateRevisionId, int targetEstimateRevisionId, int OptionId, int userId) {
            return base.Channel.ReAddDeletedEstimateItem(sourceEstimateRevisionId, targetEstimateRevisionId, OptionId, userId);
        }
        
        public System.Threading.Tasks.Task<bool> ReAddDeletedEstimateItemAsync(int sourceEstimateRevisionId, int targetEstimateRevisionId, int OptionId, int userId) {
            return base.Channel.ReAddDeletedEstimateItemAsync(sourceEstimateRevisionId, targetEstimateRevisionId, OptionId, userId);
        }
        
        public bool ReAddDeletedMasterPromotionEstimateItem(int estimateRevisionId, int OptionId, int userId) {
            return base.Channel.ReAddDeletedMasterPromotionEstimateItem(estimateRevisionId, OptionId, userId);
        }
        
        public System.Threading.Tasks.Task<bool> ReAddDeletedMasterPromotionEstimateItemAsync(int estimateRevisionId, int OptionId, int userId) {
            return base.Channel.ReAddDeletedMasterPromotionEstimateItemAsync(estimateRevisionId, OptionId, userId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.SQSHome[] GetAllFacadeFromRevisonID(int revisionid) {
            return base.Channel.GetAllFacadeFromRevisonID(revisionid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SQSHome[]> GetAllFacadeFromRevisonIDAsync(int revisionid) {
            return base.Channel.GetAllFacadeFromRevisonIDAsync(revisionid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.SQSHome[] GetAllAvailableHomeByState(int stateid, string searchText, bool showdisplayhomes) {
            return base.Channel.GetAllAvailableHomeByState(stateid, searchText, showdisplayhomes);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SQSHome[]> GetAllAvailableHomeByStateAsync(int stateid, string searchText, bool showdisplayhomes) {
            return base.Channel.GetAllAvailableHomeByStateAsync(stateid, searchText, showdisplayhomes);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.SQSHome[] GetHomeFullNameByState(int stateid, int userId) {
            return base.Channel.GetHomeFullNameByState(stateid, userId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SQSHome[]> GetHomeFullNameByStateAsync(int stateid, int userId) {
            return base.Channel.GetHomeFullNameByStateAsync(stateid, userId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.SQSArea[] GetAreaNameWithAll() {
            return base.Channel.GetAreaNameWithAll();
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SQSArea[]> GetAreaNameWithAllAsync() {
            return base.Channel.GetAreaNameWithAllAsync();
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.SQSGroup[] GetGroupNameWithAll() {
            return base.Channel.GetGroupNameWithAll();
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SQSGroup[]> GetGroupNameWithAllAsync() {
            return base.Channel.GetGroupNameWithAllAsync();
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[] CheckFacadeConfigurationDifference(int revisionid, int newfacadehomeid, string effectivedate) {
            return base.Channel.CheckFacadeConfigurationDifference(revisionid, newfacadehomeid, effectivedate);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[]> CheckFacadeConfigurationDifferenceAsync(int revisionid, int newfacadehomeid, string effectivedate) {
            return base.Channel.CheckFacadeConfigurationDifferenceAsync(revisionid, newfacadehomeid, effectivedate);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[] CheckHomeConfigurationDifference(int revisionid, int newfacadehomeid, string effectivedate) {
            return base.Channel.CheckHomeConfigurationDifference(revisionid, newfacadehomeid, effectivedate);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[]> CheckHomeConfigurationDifferenceAsync(int revisionid, int newfacadehomeid, string effectivedate) {
            return base.Channel.CheckHomeConfigurationDifferenceAsync(revisionid, newfacadehomeid, effectivedate);
        }
        
        public bool ChangeFacade(int revisionid, int newfacadehomeid, string detailIDsSelected, string detailOptionsSeleced, string detailPricesSeleced, string effectivedate, int userid) {
            return base.Channel.ChangeFacade(revisionid, newfacadehomeid, detailIDsSelected, detailOptionsSeleced, detailPricesSeleced, effectivedate, userid);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeFacadeAsync(int revisionid, int newfacadehomeid, string detailIDsSelected, string detailOptionsSeleced, string detailPricesSeleced, string effectivedate, int userid) {
            return base.Channel.ChangeFacadeAsync(revisionid, newfacadehomeid, detailIDsSelected, detailOptionsSeleced, detailPricesSeleced, effectivedate, userid);
        }
        
        public bool ChangeHome(int revisionid, int newfacadehomeid, string detailIDsSelected, string detailOptionsSeleced, string detailPricesSeleced, string effectivedate, int userid) {
            return base.Channel.ChangeHome(revisionid, newfacadehomeid, detailIDsSelected, detailOptionsSeleced, detailPricesSeleced, effectivedate, userid);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeHomeAsync(int revisionid, int newfacadehomeid, string detailIDsSelected, string detailOptionsSeleced, string detailPricesSeleced, string effectivedate, int userid) {
            return base.Channel.ChangeHomeAsync(revisionid, newfacadehomeid, detailIDsSelected, detailOptionsSeleced, detailPricesSeleced, effectivedate, userid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.ContractType[] GetContractType(string configCode) {
            return base.Channel.GetContractType(configCode);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ContractType[]> GetContractTypeAsync(string configCode) {
            return base.Channel.GetContractTypeAsync(configCode);
        }
        
        public bool UpdateContractType(int revisionid, string contracttype, string jobflowtype, int userid) {
            return base.Channel.UpdateContractType(revisionid, contracttype, jobflowtype, userid);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateContractTypeAsync(int revisionid, string contracttype, string jobflowtype, int userid) {
            return base.Channel.UpdateContractTypeAsync(revisionid, contracttype, jobflowtype, userid);
        }
        
        public string GetHomeName(int revisionid) {
            return base.Channel.GetHomeName(revisionid);
        }
        
        public System.Threading.Tasks.Task<string> GetHomeNameAsync(int revisionid) {
            return base.Channel.GetHomeNameAsync(revisionid);
        }
        
        public bool UpdateHomeName(int revisionid, string homename, int userid) {
            return base.Channel.UpdateHomeName(revisionid, homename, userid);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateHomeNameAsync(int revisionid, string homename, int userid) {
            return base.Channel.UpdateHomeNameAsync(revisionid, homename, userid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[] CopyEstimateCheckDifference(string sourceEstimatenumber, string destinationEstimatenumber) {
            return base.Channel.CopyEstimateCheckDifference(sourceEstimatenumber, destinationEstimatenumber);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[]> CopyEstimateCheckDifferenceAsync(string sourceEstimatenumber, string destinationEstimatenumber) {
            return base.Channel.CopyEstimateCheckDifferenceAsync(sourceEstimatenumber, destinationEstimatenumber);
        }
        
        public bool CopyEstimate(string sourceEstimatenumber, string destinationEstimatenumber) {
            return base.Channel.CopyEstimate(sourceEstimatenumber, destinationEstimatenumber);
        }
        
        public System.Threading.Tasks.Task<bool> CopyEstimateAsync(string sourceEstimatenumber, string destinationEstimatenumber) {
            return base.Channel.CopyEstimateAsync(sourceEstimatenumber, destinationEstimatenumber);
        }
        
        public decimal[] GetAreaSurcharge(int revisionid) {
            return base.Channel.GetAreaSurcharge(revisionid);
        }
        
        public System.Threading.Tasks.Task<decimal[]> GetAreaSurchargeAsync(int revisionid) {
            return base.Channel.GetAreaSurchargeAsync(revisionid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails GetPagByID(int estimaterevisionid, int optionid) {
            return base.Channel.GetPagByID(estimaterevisionid, optionid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails> GetPagByIDAsync(int estimaterevisionid, int optionid) {
            return base.Channel.GetPagByIDAsync(estimaterevisionid, optionid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.SimplePAG[] GetUpgradeOptionListForStandardInclusion(int estimaterevisionid, int originateoptionid) {
            return base.Channel.GetUpgradeOptionListForStandardInclusion(estimaterevisionid, originateoptionid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SimplePAG[]> GetUpgradeOptionListForStandardInclusionAsync(int estimaterevisionid, int originateoptionid) {
            return base.Channel.GetUpgradeOptionListForStandardInclusionAsync(estimaterevisionid, originateoptionid);
        }
        
        public string GetStudioMQandA(int optionId) {
            return base.Channel.GetStudioMQandA(optionId);
        }
        
        public System.Threading.Tasks.Task<string> GetStudioMQandAAsync(int optionId) {
            return base.Channel.GetStudioMQandAAsync(optionId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.SharepointDoc[] Sharepoint_GetFileList(string opportunityid, string contractnumber) {
            return base.Channel.Sharepoint_GetFileList(opportunityid, contractnumber);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SharepointDoc[]> Sharepoint_GetFileListAsync(string opportunityid, string contractnumber) {
            return base.Channel.Sharepoint_GetFileListAsync(opportunityid, contractnumber);
        }
        
        public bool Sharepoint_SharepointUploadFile(string filename, byte[] contents, string oldname, string opportunityid, string doccategory, string doctype) {
            return base.Channel.Sharepoint_SharepointUploadFile(filename, contents, oldname, opportunityid, doccategory, doctype);
        }
        
        public System.Threading.Tasks.Task<bool> Sharepoint_SharepointUploadFileAsync(string filename, byte[] contents, string oldname, string opportunityid, string doccategory, string doctype) {
            return base.Channel.Sharepoint_SharepointUploadFileAsync(filename, contents, oldname, opportunityid, doccategory, doctype);
        }
        
        public bool Sharepoint_DeleteFileFromSharepointLibrary(Metricon.WCF.MetriconRetailSystem.Contracts.SharepointDoc doc, string opportunityid, string contractnumber) {
            return base.Channel.Sharepoint_DeleteFileFromSharepointLibrary(doc, opportunityid, contractnumber);
        }
        
        public System.Threading.Tasks.Task<bool> Sharepoint_DeleteFileFromSharepointLibraryAsync(Metricon.WCF.MetriconRetailSystem.Contracts.SharepointDoc doc, string opportunityid, string contractnumber) {
            return base.Channel.Sharepoint_DeleteFileFromSharepointLibraryAsync(doc, opportunityid, contractnumber);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.SharepointDocumentType[] Sharepoint_GetSalesDocumentType() {
            return base.Channel.Sharepoint_GetSalesDocumentType();
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SharepointDocumentType[]> Sharepoint_GetSalesDocumentTypeAsync() {
            return base.Channel.Sharepoint_GetSalesDocumentTypeAsync();
        }
        
        public bool SendNotificationEmail(string templateobjectid, string actionuserfullname, string recipientfullname, string contractnumber, string templateobjecttype, string emailtype, string estimatenumber, string revisionnumber, string comments) {
            return base.Channel.SendNotificationEmail(templateobjectid, actionuserfullname, recipientfullname, contractnumber, templateobjecttype, emailtype, estimatenumber, revisionnumber, comments);
        }
        
        public System.Threading.Tasks.Task<bool> SendNotificationEmailAsync(string templateobjectid, string actionuserfullname, string recipientfullname, string contractnumber, string templateobjecttype, string emailtype, string estimatenumber, string revisionnumber, string comments) {
            return base.Channel.SendNotificationEmailAsync(templateobjectid, actionuserfullname, recipientfullname, contractnumber, templateobjecttype, emailtype, estimatenumber, revisionnumber, comments);
        }
        
        public bool SendCrmEmail(System.Guid contractId, int recipientId, string subject, string body) {
            return base.Channel.SendCrmEmail(contractId, recipientId, subject, body);
        }
        
        public System.Threading.Tasks.Task<bool> SendCrmEmailAsync(System.Guid contractId, int recipientId, string subject, string body) {
            return base.Channel.SendCrmEmailAsync(contractId, recipientId, subject, body);
        }
        
        public string GetStudioMQuestionForAProduct(string pproductid) {
            return base.Channel.GetStudioMQuestionForAProduct(pproductid);
        }
        
        public System.Threading.Tasks.Task<string> GetStudioMQuestionForAProductAsync(string pproductid) {
            return base.Channel.GetStudioMQuestionForAProductAsync(pproductid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.PAG[] GetInLieuStandardPromotionItems(int estimaterevisionid, int originateoptionid) {
            return base.Channel.GetInLieuStandardPromotionItems(estimaterevisionid, originateoptionid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.PAG[]> GetInLieuStandardPromotionItemsAsync(int estimaterevisionid, int originateoptionid) {
            return base.Channel.GetInLieuStandardPromotionItemsAsync(estimaterevisionid, originateoptionid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.RoleAccessModule GetRoleAccessModule(int roleid) {
            return base.Channel.GetRoleAccessModule(roleid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.RoleAccessModule> GetRoleAccessModuleAsync(int roleid) {
            return base.Channel.GetRoleAccessModuleAsync(roleid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.ItemRemoveReason[] GetItemRemoveReason() {
            return base.Channel.GetItemRemoveReason();
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ItemRemoveReason[]> GetItemRemoveReasonAsync() {
            return base.Channel.GetItemRemoveReasonAsync();
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.StudioMItem[] GetItemsNeedSetDefaultAnswer(string revisionid) {
            return base.Channel.GetItemsNeedSetDefaultAnswer(revisionid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.StudioMItem[]> GetItemsNeedSetDefaultAnswerAsync(string revisionid) {
            return base.Channel.GetItemsNeedSetDefaultAnswerAsync(revisionid);
        }
        
        public bool SetDefaultAnswerForEstimateRevision(string idstring, string studiomstring, string usercode) {
            return base.Channel.SetDefaultAnswerForEstimateRevision(idstring, studiomstring, usercode);
        }
        
        public System.Threading.Tasks.Task<bool> SetDefaultAnswerForEstimateRevisionAsync(string idstring, string studiomstring, string usercode) {
            return base.Channel.SetDefaultAnswerForEstimateRevisionAsync(idstring, studiomstring, usercode);
        }
        
        public void RegisterEvent(string action, int revisionid, int userid) {
            base.Channel.RegisterEvent(action, revisionid, userid);
        }
        
        public System.Threading.Tasks.Task RegisterEventAsync(string action, int revisionid, int userid) {
            return base.Channel.RegisterEventAsync(action, revisionid, userid);
        }
        
        public System.DateTime GetStudioMAppointmentTime(string contractNumber, string eventNumber) {
            return base.Channel.GetStudioMAppointmentTime(contractNumber, eventNumber);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetStudioMAppointmentTimeAsync(string contractNumber, string eventNumber) {
            return base.Channel.GetStudioMAppointmentTimeAsync(contractNumber, eventNumber);
        }
        
        public void UpdateEstimateDetailsDescription(Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] items, int userId) {
            base.Channel.UpdateEstimateDetailsDescription(items, userId);
        }
        
        public System.Threading.Tasks.Task UpdateEstimateDetailsDescriptionAsync(Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] items, int userId) {
            return base.Channel.UpdateEstimateDetailsDescriptionAsync(items, userId);
        }
        
        public bool MoveEstimateDetailItem(int revisionDetailsIdSource, int revisionDetailsIdTarget, int userId) {
            return base.Channel.MoveEstimateDetailItem(revisionDetailsIdSource, revisionDetailsIdTarget, userId);
        }
        
        public System.Threading.Tasks.Task<bool> MoveEstimateDetailItemAsync(int revisionDetailsIdSource, int revisionDetailsIdTarget, int userId) {
            return base.Channel.MoveEstimateDetailItemAsync(revisionDetailsIdSource, revisionDetailsIdTarget, userId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.DocuSignDocStatusInfo[] DocuSign_GetDocumentInfo(string revisionid, string estimateid) {
            return base.Channel.DocuSign_GetDocumentInfo(revisionid, estimateid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.DocuSignDocStatusInfo[]> DocuSign_GetDocumentInfoAsync(string revisionid, string estimateid) {
            return base.Channel.DocuSign_GetDocumentInfoAsync(revisionid, estimateid);
        }
        
        public bool DocuSign_PushDocumentToTheProcessQueue(string revisionid, string printtype, string documenttype, int userid) {
            return base.Channel.DocuSign_PushDocumentToTheProcessQueue(revisionid, printtype, documenttype, userid);
        }
        
        public System.Threading.Tasks.Task<bool> DocuSign_PushDocumentToTheProcessQueueAsync(string revisionid, string printtype, string documenttype, int userid) {
            return base.Channel.DocuSign_PushDocumentToTheProcessQueueAsync(revisionid, printtype, documenttype, userid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] GetPromotionProductByMasterPromotionRevisionDetailsID(string revisiondetailsid) {
            return base.Channel.GetPromotionProductByMasterPromotionRevisionDetailsID(revisiondetailsid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[]> GetPromotionProductByMasterPromotionRevisionDetailsIDAsync(string revisiondetailsid) {
            return base.Channel.GetPromotionProductByMasterPromotionRevisionDetailsIDAsync(revisiondetailsid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.PromotionPAG[] GetExistingPromotionProductByMasterPromotionRevisionDetailsID(string revisiondetailsid) {
            return base.Channel.GetExistingPromotionProductByMasterPromotionRevisionDetailsID(revisiondetailsid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.PromotionPAG[]> GetExistingPromotionProductByMasterPromotionRevisionDetailsIDAsync(string revisiondetailsid) {
            return base.Channel.GetExistingPromotionProductByMasterPromotionRevisionDetailsIDAsync(revisiondetailsid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] GetEstimateDetailsByIDString(string selectedrevisiondetailsid) {
            return base.Channel.GetEstimateDetailsByIDString(selectedrevisiondetailsid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[]> GetEstimateDetailsByIDStringAsync(string selectedrevisiondetailsid) {
            return base.Channel.GetEstimateDetailsByIDStringAsync(selectedrevisiondetailsid);
        }
        
        public bool DeleteMasterPromotionItem(string masterpromotionitemid, string selectedpromotionitemids, int userid) {
            return base.Channel.DeleteMasterPromotionItem(masterpromotionitemid, selectedpromotionitemids, userid);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMasterPromotionItemAsync(string masterpromotionitemid, string selectedpromotionitemids, int userid) {
            return base.Channel.DeleteMasterPromotionItemAsync(masterpromotionitemid, selectedpromotionitemids, userid);
        }
        
        public bool DocuSign_RemoveDocumentFromTheProcessQueue(string integrationid) {
            return base.Channel.DocuSign_RemoveDocumentFromTheProcessQueue(integrationid);
        }
        
        public System.Threading.Tasks.Task<bool> DocuSign_RemoveDocumentFromTheProcessQueueAsync(string integrationid) {
            return base.Channel.DocuSign_RemoveDocumentFromTheProcessQueueAsync(integrationid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.CRMContact[] GetCRMContactForAccountAsSigner(System.Guid accountid) {
            return base.Channel.GetCRMContactForAccountAsSigner(accountid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.CRMContact[]> GetCRMContactForAccountAsSignerAsync(System.Guid accountid) {
            return base.Channel.GetCRMContactForAccountAsSignerAsync(accountid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.DocuSignHistory[] DocuSign_GetEnvelopeHistory(string envelopeid) {
            return base.Channel.DocuSign_GetEnvelopeHistory(envelopeid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.DocuSignHistory[]> DocuSign_GetEnvelopeHistoryAsync(string envelopeid) {
            return base.Channel.DocuSign_GetEnvelopeHistoryAsync(envelopeid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.DocuSignHistory[] DocuSign_GetEnvelopeHistoryByRevision(string revisionid, string versiontype, string printtype) {
            return base.Channel.DocuSign_GetEnvelopeHistoryByRevision(revisionid, versiontype, printtype);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.DocuSignHistory[]> DocuSign_GetEnvelopeHistoryByRevisionAsync(string revisionid, string versiontype, string printtype) {
            return base.Channel.DocuSign_GetEnvelopeHistoryByRevisionAsync(revisionid, versiontype, printtype);
        }
        
        public string DocuSign_ValidateSignerAndDocuemnt(string estimateid, string versionnumber, string recipientname, string recipienttype, string recipientaction) {
            return base.Channel.DocuSign_ValidateSignerAndDocuemnt(estimateid, versionnumber, recipientname, recipienttype, recipientaction);
        }
        
        public System.Threading.Tasks.Task<string> DocuSign_ValidateSignerAndDocuemntAsync(string estimateid, string versionnumber, string recipientname, string recipienttype, string recipientaction) {
            return base.Channel.DocuSign_ValidateSignerAndDocuemntAsync(estimateid, versionnumber, recipientname, recipienttype, recipientaction);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateGridItem[] SearchSpecificJob(string customernumber, string contractnumber, string SelectedSalesConsultantId, string LotNumber, string StreetName, string Suburb, string businessUnit) {
            return base.Channel.SearchSpecificJob(customernumber, contractnumber, SelectedSalesConsultantId, LotNumber, StreetName, Suburb, businessUnit);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateGridItem[]> SearchSpecificJobAsync(string customernumber, string contractnumber, string SelectedSalesConsultantId, string LotNumber, string StreetName, string Suburb, string businessUnit) {
            return base.Channel.SearchSpecificJobAsync(customernumber, contractnumber, SelectedSalesConsultantId, LotNumber, StreetName, Suburb, businessUnit);
        }
        
        public int ResetEditEstimateUserID(int estimateRevisionId, int editEstimateUserID) {
            return base.Channel.ResetEditEstimateUserID(estimateRevisionId, editEstimateUserID);
        }
        
        public System.Threading.Tasks.Task<int> ResetEditEstimateUserIDAsync(int estimateRevisionId, int editEstimateUserID) {
            return base.Channel.ResetEditEstimateUserIDAsync(estimateRevisionId, editEstimateUserID);
        }
        
        public bool ApplyRounding(int revisionid) {
            return base.Channel.ApplyRounding(revisionid);
        }
        
        public System.Threading.Tasks.Task<bool> ApplyRoundingAsync(int revisionid) {
            return base.Channel.ApplyRoundingAsync(revisionid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDisclaimerUpdateDetail GetEstimateDisclaimerUpdateDetails(int revisionid) {
            return base.Channel.GetEstimateDisclaimerUpdateDetails(revisionid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDisclaimerUpdateDetail> GetEstimateDisclaimerUpdateDetailsAsync(int revisionid) {
            return base.Channel.GetEstimateDisclaimerUpdateDetailsAsync(revisionid);
        }
        
        public bool SaveDisclaimerUpdateDetails(int revisionId, int typeId, int disclaimerNewId, int userId) {
            return base.Channel.SaveDisclaimerUpdateDetails(revisionId, typeId, disclaimerNewId, userId);
        }
        
        public System.Threading.Tasks.Task<bool> SaveDisclaimerUpdateDetailsAsync(int revisionId, int typeId, int disclaimerNewId, int userId) {
            return base.Channel.SaveDisclaimerUpdateDetailsAsync(revisionId, typeId, disclaimerNewId, userId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.GenericClassCodeName[] GetBusinessUnits(int regionid) {
            return base.Channel.GetBusinessUnits(regionid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.GenericClassCodeName[]> GetBusinessUnitsAsync(int regionid) {
            return base.Channel.GetBusinessUnitsAsync(regionid);
        }
        
        public string GetBCForecastDate(string bcContractNumber) {
            return base.Channel.GetBCForecastDate(bcContractNumber);
        }
        
        public System.Threading.Tasks.Task<string> GetBCForecastDateAsync(string bcContractNumber) {
            return base.Channel.GetBCForecastDateAsync(bcContractNumber);
        }
        
        public void AcceptOriginalEstimate(int estimateId, int userId) {
            base.Channel.AcceptOriginalEstimate(estimateId, userId);
        }
        
        public System.Threading.Tasks.Task AcceptOriginalEstimateAsync(int estimateId, int userId) {
            return base.Channel.AcceptOriginalEstimateAsync(estimateId, userId);
        }
        
        public int AssignQueuedEstimate(int queueId, int userId, int ownerId) {
            return base.Channel.AssignQueuedEstimate(queueId, userId, ownerId);
        }
        
        public System.Threading.Tasks.Task<int> AssignQueuedEstimateAsync(int queueId, int userId, int ownerId) {
            return base.Channel.AssignQueuedEstimateAsync(queueId, userId, ownerId);
        }
        
        public void AssignWorkingEstimate(int estimateRevisionId, int userId, int ownerId) {
            base.Channel.AssignWorkingEstimate(estimateRevisionId, userId, ownerId);
        }
        
        public System.Threading.Tasks.Task AssignWorkingEstimateAsync(int estimateRevisionId, int userId, int ownerId) {
            return base.Channel.AssignWorkingEstimateAsync(estimateRevisionId, userId, ownerId);
        }
        
        public void CompleteEstimate(int revisionId, int userId, int statusId, int statusReasonId, int revisionTypeId, int ownerId) {
            base.Channel.CompleteEstimate(revisionId, userId, statusId, statusReasonId, revisionTypeId, ownerId);
        }
        
        public System.Threading.Tasks.Task CompleteEstimateAsync(int revisionId, int userId, int statusId, int statusReasonId, int revisionTypeId, int ownerId) {
            return base.Channel.CompleteEstimateAsync(revisionId, userId, statusId, statusReasonId, revisionTypeId, ownerId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateGridItem[] GetQueuedEstimates(int revisionTypeId, int regionId, int roleId, string customerNumber, string contractNumber, int salesConsultantId, string lotNumber, string streetName, string suburb, string businessUnit) {
            return base.Channel.GetQueuedEstimates(revisionTypeId, regionId, roleId, customerNumber, contractNumber, salesConsultantId, lotNumber, streetName, suburb, businessUnit);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateGridItem[]> GetQueuedEstimatesAsync(int revisionTypeId, int regionId, int roleId, string customerNumber, string contractNumber, int salesConsultantId, string lotNumber, string streetName, string suburb, string businessUnit) {
            return base.Channel.GetQueuedEstimatesAsync(revisionTypeId, regionId, roleId, customerNumber, contractNumber, salesConsultantId, lotNumber, streetName, suburb, businessUnit);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateGridItem[] GetAssignedEstimates(int revisionTypeId, int roleId, int statusId, int userId, int regionId, string customerNumber, string contractNumber, int salesConsultantId, string lotNumber, string streetName, string suburb, string businessUnit) {
            return base.Channel.GetAssignedEstimates(revisionTypeId, roleId, statusId, userId, regionId, customerNumber, contractNumber, salesConsultantId, lotNumber, streetName, suburb, businessUnit);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateGridItem[]> GetAssignedEstimatesAsync(int revisionTypeId, int roleId, int statusId, int userId, int regionId, string customerNumber, string contractNumber, int salesConsultantId, string lotNumber, string streetName, string suburb, string businessUnit) {
            return base.Channel.GetAssignedEstimatesAsync(revisionTypeId, roleId, statusId, userId, regionId, customerNumber, contractNumber, salesConsultantId, lotNumber, streetName, suburb, businessUnit);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateHeader GetEstimateHeader(int revisionId) {
            return base.Channel.GetEstimateHeader(revisionId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateHeader> GetEstimateHeaderAsync(int revisionId) {
            return base.Channel.GetEstimateHeaderAsync(revisionId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] GetEstimateDetails(int revisionId) {
            return base.Channel.GetEstimateDetails(revisionId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[]> GetEstimateDetailsAsync(int revisionId) {
            return base.Channel.GetEstimateDetailsAsync(revisionId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateHeader[] GetEstimatesRevisions(int estimateId) {
            return base.Channel.GetEstimatesRevisions(estimateId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateHeader[]> GetEstimatesRevisionsAsync(int estimateId) {
            return base.Channel.GetEstimatesRevisionsAsync(estimateId);
        }
        
        public string UndoThisRevision(int bcContractNumber, int estimateId, int estimateRevisionId, int userId, string reasonComment) {
            return base.Channel.UndoThisRevision(bcContractNumber, estimateId, estimateRevisionId, userId, reasonComment);
        }
        
        public System.Threading.Tasks.Task<string> UndoThisRevisionAsync(int bcContractNumber, int estimateId, int estimateRevisionId, int userId, string reasonComment) {
            return base.Channel.UndoThisRevisionAsync(bcContractNumber, estimateId, estimateRevisionId, userId, reasonComment);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateHeader[] UndoThisRevisionValidate(int estimateId, int bcContractNumber, int estimateRevisionId) {
            return base.Channel.UndoThisRevisionValidate(estimateId, bcContractNumber, estimateRevisionId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateHeader[]> UndoThisRevisionValidateAsync(int estimateId, int bcContractNumber, int estimateRevisionId) {
            return base.Channel.UndoThisRevisionValidateAsync(estimateId, bcContractNumber, estimateRevisionId);
        }
        
        public string UndoCurrentMilestone(int estimateRevisionId, int userId, string reasonComment) {
            return base.Channel.UndoCurrentMilestone(estimateRevisionId, userId, reasonComment);
        }
        
        public System.Threading.Tasks.Task<string> UndoCurrentMilestoneAsync(int estimateRevisionId, int userId, string reasonComment) {
            return base.Channel.UndoCurrentMilestoneAsync(estimateRevisionId, userId, reasonComment);
        }
        
        public string UndoSetAsContract(int estimateRevisionId, int userId, string reasonComment) {
            return base.Channel.UndoSetAsContract(estimateRevisionId, userId, reasonComment);
        }
        
        public System.Threading.Tasks.Task<string> UndoSetAsContractAsync(int estimateRevisionId, int userId, string reasonComment) {
            return base.Channel.UndoSetAsContractAsync(estimateRevisionId, userId, reasonComment);
        }
        
        public void UpdateEstimateDetails(
                    int revisionDetailsId, 
                    decimal price, 
                    decimal quantity, 
                    decimal totalprice, 
                    string productDescription, 
                    string extraDescription, 
                    string internalDescription, 
                    string additionalnotes, 
                    string studioManswer, 
                    int itemaccepted, 
                    int categoryid, 
                    int groupid, 
                    int pricedisplayid, 
                    int userId, 
                    int applyanswertoallgroup, 
                    string selectedimageid, 
                    bool issiteworkitem, 
                    string costbtp, 
                    string costdbc) {
            base.Channel.UpdateEstimateDetails(revisionDetailsId, price, quantity, totalprice, productDescription, extraDescription, internalDescription, additionalnotes, studioManswer, itemaccepted, categoryid, groupid, pricedisplayid, userId, applyanswertoallgroup, selectedimageid, issiteworkitem, costbtp, costdbc);
        }
        
        public System.Threading.Tasks.Task UpdateEstimateDetailsAsync(
                    int revisionDetailsId, 
                    decimal price, 
                    decimal quantity, 
                    decimal totalprice, 
                    string productDescription, 
                    string extraDescription, 
                    string internalDescription, 
                    string additionalnotes, 
                    string studioManswer, 
                    int itemaccepted, 
                    int categoryid, 
                    int groupid, 
                    int pricedisplayid, 
                    int userId, 
                    int applyanswertoallgroup, 
                    string selectedimageid, 
                    bool issiteworkitem, 
                    string costbtp, 
                    string costdbc) {
            return base.Channel.UpdateEstimateDetailsAsync(revisionDetailsId, price, quantity, totalprice, productDescription, extraDescription, internalDescription, additionalnotes, studioManswer, itemaccepted, categoryid, groupid, pricedisplayid, userId, applyanswertoallgroup, selectedimageid, issiteworkitem, costbtp, costdbc);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails DeleteProduct(int revisionDetailsId, string reason, int reasonid, int userId) {
            return base.Channel.DeleteProduct(revisionDetailsId, reason, reasonid, userId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails> DeleteProductAsync(int revisionDetailsId, string reason, int reasonid, int userId) {
            return base.Channel.DeleteProductAsync(revisionDetailsId, reason, reasonid, userId);
        }
        
        public void InsertComment(int revisionId, string comment, int userId) {
            base.Channel.InsertComment(revisionId, comment, userId);
        }
        
        public System.Threading.Tasks.Task InsertCommentAsync(int revisionId, string comment, int userId) {
            return base.Channel.InsertCommentAsync(revisionId, comment, userId);
        }
        
        public void UpdateComment(int estimateRevisionId, string comment, int userid, int variationnumber, string variationsummary) {
            base.Channel.UpdateComment(estimateRevisionId, comment, userid, variationnumber, variationsummary);
        }
        
        public System.Threading.Tasks.Task UpdateCommentAsync(int estimateRevisionId, string comment, int userid, int variationnumber, string variationsummary) {
            return base.Channel.UpdateCommentAsync(estimateRevisionId, comment, userid, variationnumber, variationsummary);
        }
        
        public void UpdateEstimateStatus(int revisionId, int statusId, int statusReasonId, int userId) {
            base.Channel.UpdateEstimateStatus(revisionId, statusId, statusReasonId, userId);
        }
        
        public System.Threading.Tasks.Task UpdateEstimateStatusAsync(int revisionId, int statusId, int statusReasonId, int userId) {
            return base.Channel.UpdateEstimateStatusAsync(revisionId, statusId, statusReasonId, userId);
        }
        
        public void UpdateEstimateDifficultyRating(int estimateRevisionId, int difficultyRatingId, int userId) {
            base.Channel.UpdateEstimateDifficultyRating(estimateRevisionId, difficultyRatingId, userId);
        }
        
        public System.Threading.Tasks.Task UpdateEstimateDifficultyRatingAsync(int estimateRevisionId, int difficultyRatingId, int userId) {
            return base.Channel.UpdateEstimateDifficultyRatingAsync(estimateRevisionId, difficultyRatingId, userId);
        }
        
        public void UpdateQueueDifficultyRating(int queueId, int difficultyRatingId) {
            base.Channel.UpdateQueueDifficultyRating(queueId, difficultyRatingId);
        }
        
        public System.Threading.Tasks.Task UpdateQueueDifficultyRatingAsync(int queueId, int difficultyRatingId) {
            return base.Channel.UpdateQueueDifficultyRatingAsync(queueId, difficultyRatingId);
        }
        
        public void MarginReport_SaveDetails(int estimateRevisionId, int titledLand, int titledLandDays, int basePriceExtensionDays, System.DateTime effectiveDate, double bpeCharge, int requiredBPEChargeType, int userId) {
            base.Channel.MarginReport_SaveDetails(estimateRevisionId, titledLand, titledLandDays, basePriceExtensionDays, effectiveDate, bpeCharge, requiredBPEChargeType, userId);
        }
        
        public System.Threading.Tasks.Task MarginReport_SaveDetailsAsync(int estimateRevisionId, int titledLand, int titledLandDays, int basePriceExtensionDays, System.DateTime effectiveDate, double bpeCharge, int requiredBPEChargeType, int userId) {
            return base.Channel.MarginReport_SaveDetailsAsync(estimateRevisionId, titledLand, titledLandDays, basePriceExtensionDays, effectiveDate, bpeCharge, requiredBPEChargeType, userId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.MarginReportDetail MarginReport_GetDetails(int estimateRevisionId) {
            return base.Channel.MarginReport_GetDetails(estimateRevisionId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.MarginReportDetail> MarginReport_GetDetailsAsync(int estimateRevisionId) {
            return base.Channel.MarginReport_GetDetailsAsync(estimateRevisionId);
        }
        
        public void UpdateEstimateDueDate(int estimateRevisionId, System.DateTime duedate, int userId) {
            base.Channel.UpdateEstimateDueDate(estimateRevisionId, duedate, userId);
        }
        
        public System.Threading.Tasks.Task UpdateEstimateDueDateAsync(int estimateRevisionId, System.DateTime duedate, int userId) {
            return base.Channel.UpdateEstimateDueDateAsync(estimateRevisionId, duedate, userId);
        }
        
        public void UpdateEstimateAppointmentTime(int estimateRevisionId, System.DateTime appointmentTime, int userId) {
            base.Channel.UpdateEstimateAppointmentTime(estimateRevisionId, appointmentTime, userId);
        }
        
        public System.Threading.Tasks.Task UpdateEstimateAppointmentTimeAsync(int estimateRevisionId, System.DateTime appointmentTime, int userId) {
            return base.Channel.UpdateEstimateAppointmentTimeAsync(estimateRevisionId, appointmentTime, userId);
        }
        
        public void UpdateQueueDueDate(int queueId, System.DateTime duedate, int userid) {
            base.Channel.UpdateQueueDueDate(queueId, duedate, userid);
        }
        
        public System.Threading.Tasks.Task UpdateQueueDueDateAsync(int queueId, System.DateTime duedate, int userid) {
            return base.Channel.UpdateQueueDueDateAsync(queueId, duedate, userid);
        }
        
        public void UpdateEstimateEffectiveDate(int estimateRevisionId, int priceId, int userId) {
            base.Channel.UpdateEstimateEffectiveDate(estimateRevisionId, priceId, userId);
        }
        
        public System.Threading.Tasks.Task UpdateEstimateEffectiveDateAsync(int estimateRevisionId, int priceId, int userId) {
            return base.Channel.UpdateEstimateEffectiveDateAsync(estimateRevisionId, priceId, userId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.User[] GetUsersByRegionAndRole(int regionId, int roleId) {
            return base.Channel.GetUsersByRegionAndRole(regionId, roleId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.User[]> GetUsersByRegionAndRoleAsync(int regionId, int roleId) {
            return base.Channel.GetUsersByRegionAndRoleAsync(regionId, roleId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.User[] GetUsersByRegionAndRevisionType(int regionId, int revisionTypeId) {
            return base.Channel.GetUsersByRegionAndRevisionType(regionId, revisionTypeId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.User[]> GetUsersByRegionAndRevisionTypeAsync(int regionId, int revisionTypeId) {
            return base.Channel.GetUsersByRegionAndRevisionTypeAsync(regionId, revisionTypeId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.User GetCurrentUser(string loginName) {
            return base.Channel.GetCurrentUser(loginName);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.User> GetCurrentUserAsync(string loginName) {
            return base.Channel.GetCurrentUserAsync(loginName);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.UserRole[] GetUserRoles(int userId) {
            return base.Channel.GetUserRoles(userId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.UserRole[]> GetUserRolesAsync(int userId) {
            return base.Channel.GetUserRolesAsync(userId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateStatus[] GetEstimateStatuses() {
            return base.Channel.GetEstimateStatuses();
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateStatus[]> GetEstimateStatusesAsync() {
            return base.Channel.GetEstimateStatusesAsync();
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.StatusReason[] GetStatusReasons(int statusId, int revisionTypeId) {
            return base.Channel.GetStatusReasons(statusId, revisionTypeId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.StatusReason[]> GetStatusReasonsAsync(int statusId, int revisionTypeId) {
            return base.Channel.GetStatusReasonsAsync(statusId, revisionTypeId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.DifficultyRating[] GetDifficultyRatings() {
            return base.Channel.GetDifficultyRatings();
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.DifficultyRating[]> GetDifficultyRatingsAsync() {
            return base.Channel.GetDifficultyRatingsAsync();
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.RevisionType[] GetRevisionTypeAccess(int roleId) {
            return base.Channel.GetRevisionTypeAccess(roleId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.RevisionType[]> GetRevisionTypeAccessAsync(int roleId) {
            return base.Channel.GetRevisionTypeAccessAsync(roleId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.HomePrice[] GetHomePrices(int estimateRevisionId) {
            return base.Channel.GetHomePrices(estimateRevisionId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.HomePrice[]> GetHomePricesAsync(int estimateRevisionId) {
            return base.Channel.GetHomePricesAsync(estimateRevisionId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.AuditLog[] GetAuditTrail(int estimateId) {
            return base.Channel.GetAuditTrail(estimateId);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.AuditLog[]> GetAuditTrailAsync(int estimateId) {
            return base.Channel.GetAuditTrailAsync(estimateId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetailsComparison[] CompareEstimateDetails(int estimateRevisionIdA, int estimateRevisionIdB) {
            return base.Channel.CompareEstimateDetails(estimateRevisionIdA, estimateRevisionIdB);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetailsComparison[]> CompareEstimateDetailsAsync(int estimateRevisionIdA, int estimateRevisionIdB) {
            return base.Channel.CompareEstimateDetailsAsync(estimateRevisionIdA, estimateRevisionIdB);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateHeaderComparison[] CompareEstimateHeader(int estimateRevisionIdA, int estimateRevisionIdB) {
            return base.Channel.CompareEstimateHeader(estimateRevisionIdA, estimateRevisionIdB);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateHeaderComparison[]> CompareEstimateHeaderAsync(int estimateRevisionIdA, int estimateRevisionIdB) {
            return base.Channel.CompareEstimateHeaderAsync(estimateRevisionIdA, estimateRevisionIdB);
        }
        
        public int GetLatestEstimateRevisionId(int estimateId) {
            return base.Channel.GetLatestEstimateRevisionId(estimateId);
        }
        
        public System.Threading.Tasks.Task<int> GetLatestEstimateRevisionIdAsync(int estimateId) {
            return base.Channel.GetLatestEstimateRevisionIdAsync(estimateId);
        }
        
        public int GetResubmittedEstimateCount(int userId, int regionId) {
            return base.Channel.GetResubmittedEstimateCount(userId, regionId);
        }
        
        public System.Threading.Tasks.Task<int> GetResubmittedEstimateCountAsync(int userId, int regionId) {
            return base.Channel.GetResubmittedEstimateCountAsync(userId, regionId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[] GetOptionTreeFromMasterHome(string regionid, string homeid) {
            return base.Channel.GetOptionTreeFromMasterHome(regionid, homeid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[]> GetOptionTreeFromMasterHomeAsync(string regionid, string homeid) {
            return base.Channel.GetOptionTreeFromMasterHomeAsync(regionid, homeid);
        }
        
        public bool CheckValidProductByRevision(int revisionId, string productId) {
            return base.Channel.CheckValidProductByRevision(revisionId, productId);
        }
        
        public System.Threading.Tasks.Task<bool> CheckValidProductByRevisionAsync(int revisionId, string productId) {
            return base.Channel.CheckValidProductByRevisionAsync(revisionId, productId);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[] GetOptionTreeAsOptionTreeProductsForEstimateItemReplace(string revisionId, string areaName, string groupName) {
            return base.Channel.GetOptionTreeAsOptionTreeProductsForEstimateItemReplace(revisionId, areaName, groupName);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[]> GetOptionTreeAsOptionTreeProductsForEstimateItemReplaceAsync(string revisionId, string areaName, string groupName) {
            return base.Channel.GetOptionTreeAsOptionTreeProductsForEstimateItemReplaceAsync(revisionId, areaName, groupName);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[] GetOptionTreeAsOptionTreeProducts(string revisionid) {
            return base.Channel.GetOptionTreeAsOptionTreeProducts(revisionid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[]> GetOptionTreeAsOptionTreeProductsAsync(string revisionid) {
            return base.Channel.GetOptionTreeAsOptionTreeProductsAsync(revisionid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[] GetOptionTreeFromAllProducts(string regionid, string searchText) {
            return base.Channel.GetOptionTreeFromAllProducts(regionid, searchText);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[]> GetOptionTreeFromAllProductsAsync(string regionid, string searchText) {
            return base.Channel.GetOptionTreeFromAllProductsAsync(regionid, searchText);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[] GetOptionTreeFromAllProductsExtended(int stateid, string regionid, int homeid, string productname, string productdesc, int areaid, int groupid) {
            return base.Channel.GetOptionTreeFromAllProductsExtended(stateid, regionid, homeid, productname, productdesc, areaid, groupid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.OptionTreeProducts[]> GetOptionTreeFromAllProductsExtendedAsync(int stateid, string regionid, int homeid, string productname, string productdesc, int areaid, int groupid) {
            return base.Channel.GetOptionTreeFromAllProductsExtendedAsync(stateid, regionid, homeid, productname, productdesc, areaid, groupid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.PAG[] GetSelectedPAG(string estimateid, string revisionnumber) {
            return base.Channel.GetSelectedPAG(estimateid, revisionnumber);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.PAG[]> GetSelectedPAGAsync(string estimateid, string revisionnumber) {
            return base.Channel.GetSelectedPAGAsync(estimateid, revisionnumber);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateComments[] GetCommentsForAnEstimate(string revisionid) {
            return base.Channel.GetCommentsForAnEstimate(revisionid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateComments[]> GetCommentsForAnEstimateAsync(string revisionid) {
            return base.Channel.GetCommentsForAnEstimateAsync(revisionid);
        }
        
        public bool GetAccessPermission(string revisionid, string userid, string roleid) {
            return base.Channel.GetAccessPermission(revisionid, userid, roleid);
        }
        
        public System.Threading.Tasks.Task<bool> GetAccessPermissionAsync(string revisionid, string userid, string roleid) {
            return base.Channel.GetAccessPermissionAsync(revisionid, userid, roleid);
        }
        
        public int[] GetEstimateCount(int userId, int roleId) {
            return base.Channel.GetEstimateCount(userId, roleId);
        }
        
        public System.Threading.Tasks.Task<int[]> GetEstimateCountAsync(int userId, int roleId) {
            return base.Channel.GetEstimateCountAsync(userId, roleId);
        }
        
        public int SaveSelectedItem(int selectedid, int revisionid, int pagid, int userid) {
            return base.Channel.SaveSelectedItem(selectedid, revisionid, pagid, userid);
        }
        
        public System.Threading.Tasks.Task<int> SaveSelectedItemAsync(int selectedid, int revisionid, int pagid, int userid) {
            return base.Channel.SaveSelectedItemAsync(selectedid, revisionid, pagid, userid);
        }
        
        public bool SaveEditItemDetails(int selectedid, int revisionid, decimal qty, decimal sellprice, string productdescription, string extradescription, string internaldescription) {
            return base.Channel.SaveEditItemDetails(selectedid, revisionid, qty, sellprice, productdescription, extradescription, internaldescription);
        }
        
        public System.Threading.Tasks.Task<bool> SaveEditItemDetailsAsync(int selectedid, int revisionid, decimal qty, decimal sellprice, string productdescription, string extradescription, string internaldescription) {
            return base.Channel.SaveEditItemDetailsAsync(selectedid, revisionid, qty, sellprice, productdescription, extradescription, internaldescription);
        }
        
        public bool RemoveItem(int selectedid, int estimateid) {
            return base.Channel.RemoveItem(selectedid, estimateid);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveItemAsync(int selectedid, int estimateid) {
            return base.Channel.RemoveItemAsync(selectedid, estimateid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails CopyItemFromOptionTreeToEstimate(int estimatedetailsid, int revisiondetailsid, int revisionid, int productareagroupid, int userid) {
            return base.Channel.CopyItemFromOptionTreeToEstimate(estimatedetailsid, revisiondetailsid, revisionid, productareagroupid, userid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails> CopyItemFromOptionTreeToEstimateAsync(int estimatedetailsid, int revisiondetailsid, int revisionid, int productareagroupid, int userid) {
            return base.Channel.CopyItemFromOptionTreeToEstimateAsync(estimatedetailsid, revisiondetailsid, revisionid, productareagroupid, userid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails CopyItemFromMasterHomeToEstimate(int regionid, int optionid, int revisionid, int userid) {
            return base.Channel.CopyItemFromMasterHomeToEstimate(regionid, optionid, revisionid, userid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails> CopyItemFromMasterHomeToEstimateAsync(int regionid, int optionid, int revisionid, int userid) {
            return base.Channel.CopyItemFromMasterHomeToEstimateAsync(regionid, optionid, revisionid, userid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails CopyItemFromAllProductsToEstimate(int regionid, string productid, int revisionid, int userid) {
            return base.Channel.CopyItemFromAllProductsToEstimate(regionid, productid, revisionid, userid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails> CopyItemFromAllProductsToEstimateAsync(int regionid, string productid, int revisionid, int userid) {
            return base.Channel.CopyItemFromAllProductsToEstimateAsync(regionid, productid, revisionid, userid);
        }
        
        public bool SynchronizeNewOptionToEstimate(int revisionid) {
            return base.Channel.SynchronizeNewOptionToEstimate(revisionid);
        }
        
        public System.Threading.Tasks.Task<bool> SynchronizeNewOptionToEstimateAsync(int revisionid) {
            return base.Channel.SynchronizeNewOptionToEstimateAsync(revisionid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] GetAdditionalNotesTemplateAndProducts(int revisionid, int userid) {
            return base.Channel.GetAdditionalNotesTemplateAndProducts(revisionid, userid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[]> GetAdditionalNotesTemplateAndProductsAsync(int revisionid, int userid) {
            return base.Channel.GetAdditionalNotesTemplateAndProductsAsync(revisionid, userid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] GetAdditionalNotesTemplateAndProductsByRegion(string templatename, string subregionid, int userid, int active, int selectedroleid) {
            return base.Channel.GetAdditionalNotesTemplateAndProductsByRegion(templatename, subregionid, userid, active, selectedroleid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[]> GetAdditionalNotesTemplateAndProductsByRegionAsync(string templatename, string subregionid, int userid, int active, int selectedroleid) {
            return base.Channel.GetAdditionalNotesTemplateAndProductsByRegionAsync(templatename, subregionid, userid, active, selectedroleid);
        }
        
        public bool UpdateNoteTemplate(int templateid, string templatename, int status, int userid, string action) {
            return base.Channel.UpdateNoteTemplate(templateid, templatename, status, userid, action);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateNoteTemplateAsync(int templateid, string templatename, int status, int userid, string action) {
            return base.Channel.UpdateNoteTemplateAsync(templateid, templatename, status, userid, action);
        }
        
        public string CheckNewNoteTemplateNameExists(int templateid, string templatename) {
            return base.Channel.CheckNewNoteTemplateNameExists(templateid, templatename);
        }
        
        public System.Threading.Tasks.Task<string> CheckNewNoteTemplateNameExistsAsync(int templateid, string templatename) {
            return base.Channel.CheckNewNoteTemplateNameExistsAsync(templateid, templatename);
        }
        
        public bool AddAdditonalNotesTemplate(string templatename, int revisionid, int userid) {
            return base.Channel.AddAdditonalNotesTemplate(templatename, revisionid, userid);
        }
        
        public System.Threading.Tasks.Task<bool> AddAdditonalNotesTemplateAsync(string templatename, int revisionid, int userid) {
            return base.Channel.AddAdditonalNotesTemplateAsync(templatename, revisionid, userid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.SQSConfiguration[] GetSQSConfiguration(string configCode, string codeValue) {
            return base.Channel.GetSQSConfiguration(configCode, codeValue);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SQSConfiguration[]> GetSQSConfigurationAsync(string configCode, string codeValue) {
            return base.Channel.GetSQSConfigurationAsync(configCode, codeValue);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.SQSSalesRegion[] GetSalesRegionByState(string stateid) {
            return base.Channel.GetSalesRegionByState(stateid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SQSSalesRegion[]> GetSalesRegionByStateAsync(string stateid) {
            return base.Channel.GetSalesRegionByStateAsync(stateid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.SQSSalesRegion[] GetPriceRegionByState(string stateid) {
            return base.Channel.GetPriceRegionByState(stateid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.SQSSalesRegion[]> GetPriceRegionByStateAsync(string stateid) {
            return base.Channel.GetPriceRegionByStateAsync(stateid);
        }
        
        public bool CreateSalesEstimateLog(string username, Metricon.WCF.MetriconRetailSystem.Contracts.MRSLogAction action, int estimateRevisionId, string extraDescription, int reasonCode) {
            return base.Channel.CreateSalesEstimateLog(username, action, estimateRevisionId, extraDescription, reasonCode);
        }
        
        public System.Threading.Tasks.Task<bool> CreateSalesEstimateLogAsync(string username, Metricon.WCF.MetriconRetailSystem.Contracts.MRSLogAction action, int estimateRevisionId, string extraDescription, int reasonCode) {
            return base.Channel.CreateSalesEstimateLogAsync(username, action, estimateRevisionId, extraDescription, reasonCode);
        }
        
        public bool SetContractStatus(string username, int estimateRevisionId, Metricon.WCF.MetriconRetailSystem.Contracts.ContractStatus status) {
            return base.Channel.SetContractStatus(username, estimateRevisionId, status);
        }
        
        public System.Threading.Tasks.Task<bool> SetContractStatusAsync(string username, int estimateRevisionId, Metricon.WCF.MetriconRetailSystem.Contracts.ContractStatus status) {
            return base.Channel.SetContractStatusAsync(username, estimateRevisionId, status);
        }
        
        public bool RemoveItemFromNotesTemplate(string templateid, string productareagroupid, int userid) {
            return base.Channel.RemoveItemFromNotesTemplate(templateid, productareagroupid, userid);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveItemFromNotesTemplateAsync(string templateid, string productareagroupid, int userid) {
            return base.Channel.RemoveItemFromNotesTemplateAsync(templateid, productareagroupid, userid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[] GetAvailableItemsForNotesTemplate(string templateid, string searchtext) {
            return base.Channel.GetAvailableItemsForNotesTemplate(templateid, searchtext);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.EstimateDetails[]> GetAvailableItemsForNotesTemplateAsync(string templateid, string searchtext) {
            return base.Channel.GetAvailableItemsForNotesTemplateAsync(templateid, searchtext);
        }
        
        public bool AddItemToNotesTemplate(string templateid, string selecteditemids, int userid) {
            return base.Channel.AddItemToNotesTemplate(templateid, selecteditemids, userid);
        }
        
        public System.Threading.Tasks.Task<bool> AddItemToNotesTemplateAsync(string templateid, string selecteditemids, int userid) {
            return base.Channel.AddItemToNotesTemplateAsync(templateid, selecteditemids, userid);
        }
        
        public bool AddNewNotesTemplate(string templatename, string regionid, int userid) {
            return base.Channel.AddNewNotesTemplate(templatename, regionid, userid);
        }
        
        public System.Threading.Tasks.Task<bool> AddNewNotesTemplateAsync(string templatename, string regionid, int userid) {
            return base.Channel.AddNewNotesTemplateAsync(templatename, regionid, userid);
        }
        
        public bool RemoveNotesTemplate(string templateid, int userid) {
            return base.Channel.RemoveNotesTemplate(templateid, userid);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveNotesTemplateAsync(string templateid, int userid) {
            return base.Channel.RemoveNotesTemplateAsync(templateid, userid);
        }
        
        public bool CopyNotesTemplate(string templatename, string regionid, int userid, string templateid) {
            return base.Channel.CopyNotesTemplate(templatename, regionid, userid, templateid);
        }
        
        public System.Threading.Tasks.Task<bool> CopyNotesTemplateAsync(string templatename, string regionid, int userid, string templateid) {
            return base.Channel.CopyNotesTemplateAsync(templatename, regionid, userid, templateid);
        }
        
        public bool CreateTaskForContract(string contractid, int revisionid, string subject, System.DateTime duedate, string category, string notes) {
            return base.Channel.CreateTaskForContract(contractid, revisionid, subject, duedate, category, notes);
        }
        
        public System.Threading.Tasks.Task<bool> CreateTaskForContractAsync(string contractid, int revisionid, string subject, System.DateTime duedate, string category, string notes) {
            return base.Channel.CreateTaskForContractAsync(contractid, revisionid, subject, duedate, category, notes);
        }
        
        public bool UpdateNotesTemplateItem(string templateid, string productareagroupid, decimal quanitity, decimal price, string extradescription, string internaldescription, string additionalinfo, int userid, bool usedefaultquantity) {
            return base.Channel.UpdateNotesTemplateItem(templateid, productareagroupid, quanitity, price, extradescription, internaldescription, additionalinfo, userid, usedefaultquantity);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateNotesTemplateItemAsync(string templateid, string productareagroupid, decimal quanitity, decimal price, string extradescription, string internaldescription, string additionalinfo, int userid, bool usedefaultquantity) {
            return base.Channel.UpdateNotesTemplateItemAsync(templateid, productareagroupid, quanitity, price, extradescription, internaldescription, additionalinfo, userid, usedefaultquantity);
        }
        
        public string SynchroniseCustomerDetails(string contractNo) {
            return base.Channel.SynchroniseCustomerDetails(contractNo);
        }
        
        public System.Threading.Tasks.Task<string> SynchroniseCustomerDetailsAsync(string contractNo) {
            return base.Channel.SynchroniseCustomerDetailsAsync(contractNo);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.NonStandardCategory[] GetNonstandardCategory() {
            return base.Channel.GetNonstandardCategory();
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.NonStandardCategory[]> GetNonstandardCategoryAsync() {
            return base.Channel.GetNonstandardCategoryAsync();
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.NonStandardCategory[] GetNonstandardCategoryByState(int stateid, int selectedareaid) {
            return base.Channel.GetNonstandardCategoryByState(stateid, selectedareaid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.NonStandardCategory[]> GetNonstandardCategoryByStateAsync(int stateid, int selectedareaid) {
            return base.Channel.GetNonstandardCategoryByStateAsync(stateid, selectedareaid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.NonStandardGroup[] GetNonstandardGroups(int selectedareaid, int stateid, int selectedgroupid) {
            return base.Channel.GetNonstandardGroups(selectedareaid, stateid, selectedgroupid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.NonStandardGroup[]> GetNonstandardGroupsAsync(int selectedareaid, int stateid, int selectedgroupid) {
            return base.Channel.GetNonstandardGroupsAsync(selectedareaid, stateid, selectedgroupid);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.PriceDisplayCode[] GetPriceDisplayCodes() {
            return base.Channel.GetPriceDisplayCodes();
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.PriceDisplayCode[]> GetPriceDisplayCodesAsync() {
            return base.Channel.GetPriceDisplayCodesAsync();
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.ProductImage[] GetProductImages(string productid, int supplierid) {
            return base.Channel.GetProductImages(productid, supplierid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ProductImage[]> GetProductImagesAsync(string productid, int supplierid) {
            return base.Channel.GetProductImagesAsync(productid, supplierid);
        }
        
        public string CheckEstimateLockStatus(int estimaterevisionid) {
            return base.Channel.CheckEstimateLockStatus(estimaterevisionid);
        }
        
        public System.Threading.Tasks.Task<string> CheckEstimateLockStatusAsync(int estimaterevisionid) {
            return base.Channel.CheckEstimateLockStatusAsync(estimaterevisionid);
        }
        
        public void UnlockEstimate(int estimaterevisionid, int type) {
            base.Channel.UnlockEstimate(estimaterevisionid, type);
        }
        
        public System.Threading.Tasks.Task UnlockEstimateAsync(int estimaterevisionid, int type) {
            return base.Channel.UnlockEstimateAsync(estimaterevisionid, type);
        }
        
        public Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[] ValidateStudioMEstimate(int estimaterevisionid) {
            return base.Channel.ValidateStudioMEstimate(estimaterevisionid);
        }
        
        public System.Threading.Tasks.Task<Metricon.WCF.MetriconRetailSystem.Contracts.ValidationErrorMessage[]> ValidateStudioMEstimateAsync(int estimaterevisionid) {
            return base.Channel.ValidateStudioMEstimateAsync(estimaterevisionid);
        }
        
        public bool UpdateItemAcceptance(string revisionestimatedetailsid, int accepted, int userid) {
            return base.Channel.UpdateItemAcceptance(revisionestimatedetailsid, accepted, userid);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateItemAcceptanceAsync(string revisionestimatedetailsid, int accepted, int userid) {
            return base.Channel.UpdateItemAcceptanceAsync(revisionestimatedetailsid, accepted, userid);
        }
    }
}
